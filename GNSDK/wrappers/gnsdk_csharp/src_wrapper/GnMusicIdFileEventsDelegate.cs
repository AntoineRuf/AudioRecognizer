/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GracenoteSDK {

using System;
using System.Runtime.InteropServices;

public class GnMusicIdFileEventsDelegate : GnStatusEventsDelegate {
  private HandleRef swigCPtr;

  internal GnMusicIdFileEventsDelegate(IntPtr cPtr, bool cMemoryOwn) : base(gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GnMusicIdFileEventsDelegate obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GnMusicIdFileEventsDelegate() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gnsdk_csharp_marshalPINVOKE.delete_GnMusicIdFileEventsDelegate(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void MusicIdFileStatusEvent(GnMusicIdFileInfo fileInfo, GnMusicIdFileCallbackStatus status, uint currentFile, uint totalFiles, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_MusicIdFileStatusEvent(swigCPtr, GnMusicIdFileInfo.getCPtr(fileInfo), (int)status, currentFile, totalFiles, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GatherFingerprint(GnMusicIdFileInfo fileInfo, uint currentFile, uint totalFiles, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_GatherFingerprint(swigCPtr, GnMusicIdFileInfo.getCPtr(fileInfo), currentFile, totalFiles, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GatherMetadata(GnMusicIdFileInfo fileInfo, uint currentFile, uint totalFiles, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_GatherMetadata(swigCPtr, GnMusicIdFileInfo.getCPtr(fileInfo), currentFile, totalFiles, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MusicIdFileAlbumResult(GnResponseAlbums albumResult, uint currentAlbum, uint totalAlbums, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_MusicIdFileAlbumResult(swigCPtr, GnResponseAlbums.getCPtr(albumResult), currentAlbum, totalAlbums, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MusicIdFileMatchResult(GnResponseDataMatches matchesResult, uint currentAlbum, uint totalAlbums, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_MusicIdFileMatchResult(swigCPtr, GnResponseDataMatches.getCPtr(matchesResult), currentAlbum, totalAlbums, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MusicIdFileResultNotFound(GnMusicIdFileInfo fileInfo, uint currentFile, uint totalFiles, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_MusicIdFileResultNotFound(swigCPtr, GnMusicIdFileInfo.getCPtr(fileInfo), currentFile, totalFiles, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MusicIdFileComplete(GnError completeError) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_MusicIdFileComplete(swigCPtr, GnError.getCPtr(completeError));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public GnMusicIdFileEventsDelegate() : this(gnsdk_csharp_marshalPINVOKE.new_GnMusicIdFileEventsDelegate(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("StatusEvent", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGnMusicIdFileEventsDelegate_0(SwigDirectorStatusEvent);
    if (SwigDerivedClassHasMethod("MusicIdFileStatusEvent", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGnMusicIdFileEventsDelegate_1(SwigDirectorMusicIdFileStatusEvent);
    if (SwigDerivedClassHasMethod("GatherFingerprint", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateGnMusicIdFileEventsDelegate_2(SwigDirectorGatherFingerprint);
    if (SwigDerivedClassHasMethod("GatherMetadata", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateGnMusicIdFileEventsDelegate_3(SwigDirectorGatherMetadata);
    if (SwigDerivedClassHasMethod("MusicIdFileAlbumResult", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateGnMusicIdFileEventsDelegate_4(SwigDirectorMusicIdFileAlbumResult);
    if (SwigDerivedClassHasMethod("MusicIdFileMatchResult", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateGnMusicIdFileEventsDelegate_5(SwigDirectorMusicIdFileMatchResult);
    if (SwigDerivedClassHasMethod("MusicIdFileResultNotFound", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateGnMusicIdFileEventsDelegate_6(SwigDirectorMusicIdFileResultNotFound);
    if (SwigDerivedClassHasMethod("MusicIdFileComplete", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateGnMusicIdFileEventsDelegate_7(SwigDirectorMusicIdFileComplete);
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileEventsDelegate_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(GnMusicIdFileEventsDelegate));
    return hasDerivedMethod;
  }

  private void SwigDirectorStatusEvent(int status, uint percentComplete, uint bytesTotalSent, uint bytesTotalReceived, IntPtr canceller) {
    StatusEvent((GnStatus)status, percentComplete, bytesTotalSent, bytesTotalReceived, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorMusicIdFileStatusEvent(IntPtr fileInfo, int status, uint currentFile, uint totalFiles, IntPtr canceller) {
    MusicIdFileStatusEvent(new GnMusicIdFileInfo(fileInfo, false), (GnMusicIdFileCallbackStatus)status, currentFile, totalFiles, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorGatherFingerprint(IntPtr fileInfo, uint currentFile, uint totalFiles, IntPtr canceller) {
    GatherFingerprint(new GnMusicIdFileInfo(fileInfo, false), currentFile, totalFiles, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorGatherMetadata(IntPtr fileInfo, uint currentFile, uint totalFiles, IntPtr canceller) {
    GatherMetadata(new GnMusicIdFileInfo(fileInfo, false), currentFile, totalFiles, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorMusicIdFileAlbumResult(IntPtr albumResult, uint currentAlbum, uint totalAlbums, IntPtr canceller) {
    MusicIdFileAlbumResult(new GnResponseAlbums(albumResult, false), currentAlbum, totalAlbums, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorMusicIdFileMatchResult(IntPtr matchesResult, uint currentAlbum, uint totalAlbums, IntPtr canceller) {
    MusicIdFileMatchResult(new GnResponseDataMatches(matchesResult, false), currentAlbum, totalAlbums, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorMusicIdFileResultNotFound(IntPtr fileInfo, uint currentFile, uint totalFiles, IntPtr canceller) {
    MusicIdFileResultNotFound(new GnMusicIdFileInfo(fileInfo, false), currentFile, totalFiles, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorMusicIdFileComplete(IntPtr completeError) {
    MusicIdFileComplete(new GnError(completeError, false));
  }

  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_0(int status, uint percentComplete, uint bytesTotalSent, uint bytesTotalReceived, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_1(IntPtr fileInfo, int status, uint currentFile, uint totalFiles, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_2(IntPtr fileInfo, uint currentFile, uint totalFiles, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_3(IntPtr fileInfo, uint currentFile, uint totalFiles, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_4(IntPtr albumResult, uint currentAlbum, uint totalAlbums, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_5(IntPtr matchesResult, uint currentAlbum, uint totalAlbums, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_6(IntPtr fileInfo, uint currentFile, uint totalFiles, IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileEventsDelegate_7(IntPtr completeError);

  private SwigDelegateGnMusicIdFileEventsDelegate_0 swigDelegate0;
  private SwigDelegateGnMusicIdFileEventsDelegate_1 swigDelegate1;
  private SwigDelegateGnMusicIdFileEventsDelegate_2 swigDelegate2;
  private SwigDelegateGnMusicIdFileEventsDelegate_3 swigDelegate3;
  private SwigDelegateGnMusicIdFileEventsDelegate_4 swigDelegate4;
  private SwigDelegateGnMusicIdFileEventsDelegate_5 swigDelegate5;
  private SwigDelegateGnMusicIdFileEventsDelegate_6 swigDelegate6;
  private SwigDelegateGnMusicIdFileEventsDelegate_7 swigDelegate7;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(GnStatus), typeof(uint), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(GnMusicIdFileInfo), typeof(GnMusicIdFileCallbackStatus), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(GnMusicIdFileInfo), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(GnMusicIdFileInfo), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(GnResponseAlbums), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(GnResponseDataMatches), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(GnMusicIdFileInfo), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(GnError) };
}

}
