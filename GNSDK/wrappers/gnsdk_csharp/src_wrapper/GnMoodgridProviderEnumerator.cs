/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GracenoteSDK {

using System;
using System.Runtime.InteropServices;

public class GnMoodgridProviderEnumerator : System.Collections.Generic.IEnumerator<GnMoodgridProvider>, IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GnMoodgridProviderEnumerator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GnMoodgridProviderEnumerator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GnMoodgridProviderEnumerator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gnsdk_csharp_marshalPINVOKE.delete_GnMoodgridProviderEnumerator(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

public bool
MoveNext( )
{
	return hasNext( );
}

public GnMoodgridProvider Current {
	get {
		return  next();
	}
}
object System.Collections.IEnumerator.Current {
	get {
		return Current;
	}
}
public void
Reset( )
{
}

  public GnMoodgridProvider __ref__() {
    GnMoodgridProvider ret = new GnMoodgridProvider(gnsdk_csharp_marshalPINVOKE.GnMoodgridProviderEnumerator___ref__(swigCPtr), false);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GnMoodgridProvider next() {
    GnMoodgridProvider ret = new GnMoodgridProvider(gnsdk_csharp_marshalPINVOKE.GnMoodgridProviderEnumerator_next(swigCPtr), true);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasNext() {
    bool ret = gnsdk_csharp_marshalPINVOKE.GnMoodgridProviderEnumerator_hasNext(swigCPtr);
    return ret;
  }

  public uint distance(GnMoodgridProviderEnumerator itr) {
    uint ret = gnsdk_csharp_marshalPINVOKE.GnMoodgridProviderEnumerator_distance(swigCPtr, GnMoodgridProviderEnumerator.getCPtr(itr));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GnMoodgridProviderEnumerator(moodgrid_provider provider, uint pos) : this(gnsdk_csharp_marshalPINVOKE.new_GnMoodgridProviderEnumerator(moodgrid_provider.getCPtr(provider), pos), true) {
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
