/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GracenoteSDK {

using System;
using System.Runtime.InteropServices;

public class GnMarshalUTF8 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GnMarshalUTF8(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GnMarshalUTF8 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GnMarshalUTF8() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gnsdk_csharp_marshalPINVOKE.delete_GnMarshalUTF8(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }


public static void ReleaseMarshaledUTF8String(IntPtr marshaled)
{
	System.Runtime.InteropServices.Marshal.FreeHGlobal(marshaled);
}
	
public static IntPtr NativeUtf8FromString(string managedString) 
{
	if (managedString == null)
	{
		managedString = string.Empty;
	}
	
	int len = System.Text.Encoding.UTF8.GetByteCount(managedString);
	byte[] buffer = new byte[len + 1];
	System.Text.Encoding.UTF8.GetBytes(managedString, 0, managedString.Length, buffer, 0);

	IntPtr nativeUtf8 = Marshal.AllocHGlobal(buffer.Length);
	Marshal.Copy(buffer, 0, nativeUtf8, buffer.Length);

	return nativeUtf8;
}

public static IntPtr NativeArrayFromByteArray( byte[] array) 
{
  IntPtr native = IntPtr.Zero;
	if (array.Length > 0) {
		native = Marshal.AllocHGlobal(array.Length);
		Marshal.Copy(array, 0, native, array.Length);
	}
	return native;
}
public static string StringFromNativeUtf8(IntPtr nativeUtf8) 
{
	int len = 0;
	if (IntPtr.Zero != nativeUtf8)
	{
		while (System.Runtime.InteropServices.Marshal.ReadByte(nativeUtf8, len) != 0) 
		{
			++len;
		}
		
		if (len == 0) 
		{	
			return string.Empty;
		}
		
		byte[] buffer = new byte[len];
		System.Runtime.InteropServices.Marshal.Copy(nativeUtf8, buffer, 0, buffer.Length);
		
		return System.Text.Encoding.UTF8.GetString(buffer);
	}
	else
	{
		return string.Empty;
	}
}

	
  public GnMarshalUTF8() : this(gnsdk_csharp_marshalPINVOKE.new_GnMarshalUTF8(), true) {
  }

}

}
