/** Public header file for Gracenote SDK C++ Wrapper
 * Author:
 *   Copyright (c) 2014 Gracenote, Inc.
 *
 *   This software may not be used in any way or distributed without
 *   permission. All rights reserved.
 *
 *   Some code herein may be covered by US and international patents.
 */

#ifndef _GNSDK_LOOKUP_LOCAL_HPP_
#define _GNSDK_LOOKUP_LOCAL_HPP_

#ifndef __cplusplus
#error "C++ compiler required"
#endif

#include "gnsdk_base.hpp"

namespace gracenote
{
	namespace lookup_local
	{
#if GNSDK_LOOKUP_LOCAL

		/**
		 * Gracenote local database names
		 * Gracenote supports local lookup for various types of identification
		 * and content, each is provided in it's own Gracenote database. Each name
		 * herein represents a specific local Gracenote database.
		 * @ingroup Setup_StorageIDs
		 */
		enum GnLocalStorageName
		{
			kLocalStorageInvalid = 0,

			/**
			 * Name of the local storage the SDK uses to query Gracenote Content.
			 * @ingroup Setup_StorageIDs
			 */
			kLocalStorageContent,

			/**
			 * Name of the local storage the SDK uses to query Gracenote Metadata.
			 * @ingroup Setup_StorageIDs
			 */
			kLocalStorageMetadata,

			/**
			 * Name of the local storage the SDK uses for CD TOC searching.
			 * @ingroup Setup_StorageIDs
			 */
			kLocalStorageTOCIndex,

			/**
			 * Name of the local storage the SDK uses for text searching.
			 * @ingroup Setup_StorageIDs
			 */
			kLocalStorageTextIndex,

			/**
			 * For referencing all the above storages that make up the local storage.
			 * @ingroup Setup_StorageIDs
			 */
			kLocalStorageAll
		};

		enum GnLocalStorageInfo
		{
			kLocalStorageInfoInvalid	= 0,

			kLocalStorageInfoVersion,
			kLocalStorageInfoImageSize
		};

		/**
		 * Provides services for local lookup of various identification queries such as
		 * text and CD TOC search; plus provides services for local retreival of content
		 * such as cover art.
		 *
		 * When enabled other GNSDK query objects are able to perform local lookups for
		 * various types of Gracenote searches. For example your application can perform
		 * a local text search via GnMusicId by enabling GnLookupLocal and setting the
		 * GnMusicId lookup mode such that local lookups are allowed.
		 *
		 * GnLookupLocal uses Gracenote databases that are pre-generated by Gracenote
		 * based on region. You application must make these databases available to GNSDK
		 * by placing them in read/write portion of the filesystem accessible by the
		 * application and then set the storage location accordingly.
		 *
		 * The Gracenote databases are regularly updated. When new versions of the
		 * databases are made available you application is responsible for replacing
		 * the old databases with the new version. This is typically accomplished by
		 * shutting down GNSDK and replacing the database files.
		 */
		class GnLookupLocal
		{
		public:
			GNWRAPPER_ANNOTATE

			/**
			 * Enable local lookup for various identification queries such as
			 * text and CD TOC search; plus enable services for local retreival of
			 * content such as cover art.
			 * @ingroup Music_LookupLocal_InitializationFunctions
			 */
			static GnLookupLocal&
			Enable() throw (GnError); 

			virtual ~GnLookupLocal() { }

			/**
			 *  Version
			 *  Retrieves the Lookup Local SDK version string.
			 *  @return version string if successful
			 *  @return GNSDK_NULL if not successful
			 *  <p><b>Remarks:</b></p>
			 *  This API can be called at any time, after getting instance of GnManager successfully. The returned
			 *  string is a constant. Do not attempt to modify or delete.
			 *  Example version string: 1.2.3.123 (Major.Minor.Improvement.Build)
			 *  Major: New functionality
			 *  Minor: New or changed features
			 *  Improvement: Improvements and fixes
			 *  Build: Internal build number
			 */
			static gnsdk_cstr_t Version();

			/**
			 *  BuildDate
			 *  Retrieves the Lookup Local SDK's build date string.
			 *  @return Note Build date string of the format: YYYY-MM-DD hh:mm UTC
			 *  <p><b>Remarks:</b></p>
			 *  This API can be called at any time, after getting instance of GnManager successfully. The returned
			 *   string is a constant. Do not attempt to modify or delete.
			 *  Example build date string: 2008-02-12 00:41 UTC
			 */
			static gnsdk_cstr_t BuildDate();

			void StorageCompact(GnLocalStorageName storageName) throw (GnError);

			/**
			 *  Sets location where GNSDK can find a specific local lookup database
			 *	@param storageName 		[in] local storage name
			 *	@param storageLocation 	[in] local storage location
			 */
			void StorageLocation(GnLocalStorageName storageName, gnsdk_cstr_t storageLocation) throw (GnError);

			/**
			 *  Performs validation on named local storage.
			 *	@param storageName [in] local storage name
			 */
			void StorageValidate(GnLocalStorageName storageName) throw (GnError);

			/**
			 *  Retrieves the Local Storage information for specific storage
			 *  @param storageName 		[in] local storage name
			 *  @param storageInfo 		[in] local storage info type
			 *  @param ordinal 			[in] ordinal
			 *  @return info string if successful, GNSDK_NULL if not successful
			 */
			gnsdk_cstr_t StorageInfo(GnLocalStorageName storageName, GnLocalStorageInfo storageInfo, gnsdk_uint32_t ordinal) throw (GnError);

			/**
			 *  Retrieves the Local Storage information count for specific storage
			 *  @param storageName 		[in] local storage name
			 *  @param storageInfo 		[in] local storage info type
			 *  @return count if successful, 0 if not successful
			 */
			gnsdk_uint32_t StorageInfoCount(GnLocalStorageName storageName, GnLocalStorageInfo storageInfo) throw (GnError);

		private:
			GnLookupLocal() throw (GnError) {};

			DISALLOW_COPY_AND_ASSIGN(GnLookupLocal);
		};

#endif /* GNSDK_LOOKUP_LOCAL */

	} // namespace lookup_local

}     // namespace gracenote

#endif // _GNSDK_LOOKUP_LOCAL_HPP_
