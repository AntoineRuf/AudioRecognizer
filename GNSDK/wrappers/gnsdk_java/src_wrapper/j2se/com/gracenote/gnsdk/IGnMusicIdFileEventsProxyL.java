/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

class IGnMusicIdFileEventsProxyL extends IGnStatusEventsProxyL {
  private long swigCPtr;

  protected IGnMusicIdFileEventsProxyL(long cPtr, boolean cMemoryOwn) {
    super(gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IGnMusicIdFileEventsProxyL obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_IGnMusicIdFileEventsProxyL(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  protected void swigReleaseOwnership() {
    swigCMemOwn = false;
    gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_change_ownership(this, swigCPtr, false);
  }

  protected void swigTakeOwnership() {
    swigCMemOwn = true;
    gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_change_ownership(this, swigCPtr, true);
  }

    private long getCancellerCPtrFromCancellable(IGnCancellable cancellable) {
    	if ( cancellable instanceof IGnCancellableProxy ){
    		IGnCancellableProxy canceller = (IGnCancellableProxy)cancellable;
    		return IGnCancellableProxy.getCPtr(canceller);
    	}
    	return 0;
    }

  public void musicIdFileStatusEvent(GnMusicIdFileInfo fileInfo, GnMusicIdFileCallbackStatus status, long currentFile, long totalFiles, IGnCancellable canceller) {
IGnCancellableProxy iGnCanceller = (canceller instanceof IGnCancellableProxy)?(IGnCancellableProxy)canceller:null;
    {
      gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_musicIdFileStatusEvent(swigCPtr, this, GnMusicIdFileInfo.getCPtr(fileInfo), fileInfo, status.swigValue(), currentFile, totalFiles, getCancellerCPtrFromCancellable(canceller), iGnCanceller);
    }
  }

  public void gatherFingerprint(GnMusicIdFileInfo fileInfo, long currentFile, long totalFiles, IGnCancellable canceller) {
IGnCancellableProxy iGnCanceller = (canceller instanceof IGnCancellableProxy)?(IGnCancellableProxy)canceller:null;
    {
      gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_gatherFingerprint(swigCPtr, this, GnMusicIdFileInfo.getCPtr(fileInfo), fileInfo, currentFile, totalFiles, getCancellerCPtrFromCancellable(canceller), iGnCanceller);
    }
  }

  public void gatherMetadata(GnMusicIdFileInfo fileInfo, long currentFile, long totalFiles, IGnCancellable canceller) {
IGnCancellableProxy iGnCanceller = (canceller instanceof IGnCancellableProxy)?(IGnCancellableProxy)canceller:null;
    {
      gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_gatherMetadata(swigCPtr, this, GnMusicIdFileInfo.getCPtr(fileInfo), fileInfo, currentFile, totalFiles, getCancellerCPtrFromCancellable(canceller), iGnCanceller);
    }
  }

  public void musicIdFileAlbumResult(GnResponseAlbums albumResult, long currentAlbum, long totalAlbums, IGnCancellable canceller) {
IGnCancellableProxy iGnCanceller = (canceller instanceof IGnCancellableProxy)?(IGnCancellableProxy)canceller:null;
    {
      gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_musicIdFileAlbumResult(swigCPtr, this, GnResponseAlbums.getCPtr(albumResult), albumResult, currentAlbum, totalAlbums, getCancellerCPtrFromCancellable(canceller), iGnCanceller);
    }
  }

  public void musicIdFileMatchResult(GnResponseDataMatches matchesResult, long currentAlbum, long totalAlbums, IGnCancellable canceller) {
IGnCancellableProxy iGnCanceller = (canceller instanceof IGnCancellableProxy)?(IGnCancellableProxy)canceller:null;
    {
      gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_musicIdFileMatchResult(swigCPtr, this, GnResponseDataMatches.getCPtr(matchesResult), matchesResult, currentAlbum, totalAlbums, getCancellerCPtrFromCancellable(canceller), iGnCanceller);
    }
  }

  public void musicIdFileResultNotFound(GnMusicIdFileInfo fileInfo, long currentFile, long totalFiles, IGnCancellable canceller) {
IGnCancellableProxy iGnCanceller = (canceller instanceof IGnCancellableProxy)?(IGnCancellableProxy)canceller:null;
    {
      gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_musicIdFileResultNotFound(swigCPtr, this, GnMusicIdFileInfo.getCPtr(fileInfo), fileInfo, currentFile, totalFiles, getCancellerCPtrFromCancellable(canceller), iGnCanceller);
    }
  }

  public void musicIdFileComplete(GnError completeError) {
    gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_musicIdFileComplete(swigCPtr, this, GnError.getCPtr(completeError), completeError);
  }

  public IGnMusicIdFileEventsProxyL() {
    this(gnsdk_javaJNI.new_IGnMusicIdFileEventsProxyL(), true);
    gnsdk_javaJNI.IGnMusicIdFileEventsProxyL_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
