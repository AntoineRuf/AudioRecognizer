/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class GnMusicId extends GnObject {
  private long swigCPtr;

  protected GnMusicId(long cPtr, boolean cMemoryOwn) {
    super(gnsdk_javaJNI.GnMusicId_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnMusicId obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_GnMusicId(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	private IGnStatusEvents pEventHandler;
	private IGnStatusEventsProxyU eventHandlerProxy;
	private GnLocale locale;

    private long getCancellerCPtrFromCancellable(IGnCancellable cancellable) {
    	if ( cancellable instanceof IGnCancellableProxy ){
    		IGnCancellableProxy canceller = (IGnCancellableProxy)cancellable;
    		return IGnCancellableProxy.getCPtr(canceller);
    	}
    	return 0;
    }
    
    public boolean fingerprintWrite(byte[] audioData) throws GnException{
		return fingerprintWrite(audioData,audioData.length);
	}

  public GnMusicId(GnUser user, IGnStatusEvents pEventHandler) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventHandler != null )
	{
		eventHandlerProxy = new IGnStatusEventsProxyU(pEventHandler);
	}
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnStatusEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	this.locale = locale; 				// <REFERENCE_NAME_CHECK><TYPE>GnLocale</TYPE><NAME>locale</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicId__SWIG_0(GnUser.getCPtr(user), user, (eventHandlerProxy==null)?0:IGnStatusEventsProxyL.getCPtr(eventHandlerProxy), eventHandlerProxy);
}

  public GnMusicId(GnUser user) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventHandler != null )
	{
		eventHandlerProxy = new IGnStatusEventsProxyU(pEventHandler);
	}
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnStatusEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	this.locale = locale; 				// <REFERENCE_NAME_CHECK><TYPE>GnLocale</TYPE><NAME>locale</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicId__SWIG_1(GnUser.getCPtr(user), user);
}

  public GnMusicId(GnUser user, GnLocale locale, IGnStatusEvents pEventHandler) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventHandler != null )
	{
		eventHandlerProxy = new IGnStatusEventsProxyU(pEventHandler);
	}
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnStatusEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	this.locale = locale; 				// <REFERENCE_NAME_CHECK><TYPE>GnLocale</TYPE><NAME>locale</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicId__SWIG_2(GnUser.getCPtr(user), user, GnLocale.getCPtr(locale), locale, (eventHandlerProxy==null)?0:IGnStatusEventsProxyL.getCPtr(eventHandlerProxy), eventHandlerProxy);
}

  public GnMusicId(GnUser user, GnLocale locale) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventHandler != null )
	{
		eventHandlerProxy = new IGnStatusEventsProxyU(pEventHandler);
	}
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnStatusEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	this.locale = locale; 				// <REFERENCE_NAME_CHECK><TYPE>GnLocale</TYPE><NAME>locale</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicId__SWIG_3(GnUser.getCPtr(user), user, GnLocale.getCPtr(locale), locale);
}

  public static String version() {
    return gnsdk_javaJNI.GnMusicId_version();
  }

  public static String buildDate() {
    return gnsdk_javaJNI.GnMusicId_buildDate();
  }

  public String fingerprintDataGet() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicId_fingerprintDataGet(swigCPtr, this);
  }

  public void fingerprintBegin(GnFingerprintType fpType, long audioSampleRate, long audioSampleSize, long audioChannels) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicId_fingerprintBegin(swigCPtr, this, fpType.swigValue(), audioSampleRate, audioSampleSize, audioChannels);
  }

  public boolean fingerprintWrite(byte[] audioData, long audioDataSize) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicId_fingerprintWrite__SWIG_0(swigCPtr, this, audioData, audioDataSize);
  }

  public void fingerprintEnd() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicId_fingerprintEnd(swigCPtr, this);
  }

  public void fingerprintFromSource(IGnAudioSource audioSource, GnFingerprintType fpType) throws com.gracenote.gnsdk.GnException {
IGnAudioSourceProxyU audioSourceProxy = new IGnAudioSourceProxyU(audioSource);
    {
      gnsdk_javaJNI.GnMusicId_fingerprintFromSource(swigCPtr, this, IGnAudioSourceProxyL.getCPtr(audioSourceProxy), audioSourceProxy, fpType.swigValue());
    }
  }

  public GnResponseAlbums findAlbums(String albumTitle, String trackTitle, String albumArtistName, String trackArtistName, String composerName) throws com.gracenote.gnsdk.GnException {
    return new GnResponseAlbums(gnsdk_javaJNI.GnMusicId_findAlbums__SWIG_0(swigCPtr, this, albumTitle, trackTitle, albumArtistName, trackArtistName, composerName), true);
  }

  public GnResponseAlbums findAlbums(String CDTOC) throws com.gracenote.gnsdk.GnException {
    return new GnResponseAlbums(gnsdk_javaJNI.GnMusicId_findAlbums__SWIG_1(swigCPtr, this, CDTOC), true);
  }

  public GnResponseAlbums findAlbums(String CDTOC, String strFingerprintData, GnFingerprintType fpType) throws com.gracenote.gnsdk.GnException {
    return new GnResponseAlbums(gnsdk_javaJNI.GnMusicId_findAlbums__SWIG_2(swigCPtr, this, CDTOC, strFingerprintData, fpType.swigValue()), true);
  }

  public GnResponseAlbums findAlbums(String fingerprintData, GnFingerprintType fpType) throws com.gracenote.gnsdk.GnException {
    return new GnResponseAlbums(gnsdk_javaJNI.GnMusicId_findAlbums__SWIG_3(swigCPtr, this, fingerprintData, fpType.swigValue()), true);
  }

  public GnResponseAlbums findAlbums(GnDataObject gnDataObject) throws com.gracenote.gnsdk.GnException {
    return new GnResponseAlbums(gnsdk_javaJNI.GnMusicId_findAlbums__SWIG_4(swigCPtr, this, GnDataObject.getCPtr(gnDataObject), gnDataObject), true);
  }

  public GnResponseAlbums findAlbums(IGnAudioSource audioSource, GnFingerprintType fpType) throws com.gracenote.gnsdk.GnException {
IGnAudioSourceProxyU audioSourceProxy = new IGnAudioSourceProxyU(audioSource);
    {
      return new GnResponseAlbums(gnsdk_javaJNI.GnMusicId_findAlbums__SWIG_5(swigCPtr, this, IGnAudioSourceProxyL.getCPtr(audioSourceProxy), audioSourceProxy, fpType.swigValue()), true);
    }
  }

  public GnResponseDataMatches findMatches(String albumTitle, String trackTitle, String albumArtistName, String trackArtistName, String composerName) throws com.gracenote.gnsdk.GnException {
    return new GnResponseDataMatches(gnsdk_javaJNI.GnMusicId_findMatches(swigCPtr, this, albumTitle, trackTitle, albumArtistName, trackArtistName, composerName), true);
  }

  public IGnStatusEvents eventHandler() {
	return pEventHandler;
}

  public GnMusicIdOptions options() {
    return new GnMusicIdOptions(gnsdk_javaJNI.GnMusicId_options(swigCPtr, this), false);
  }

  public void setCancel(boolean bCancel) {
    gnsdk_javaJNI.GnMusicId_setCancel(swigCPtr, this, bCancel);
  }

  public boolean isCancelled() {
    return gnsdk_javaJNI.GnMusicId_isCancelled(swigCPtr, this);
  }

  public boolean fingerprintWrite(java.nio.ByteBuffer audioData, long audioDataSize) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicId_fingerprintWrite__SWIG_1(swigCPtr, this, audioData, audioDataSize);
  }

}
