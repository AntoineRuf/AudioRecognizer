/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class GnMusicIdFileInfo extends GnObject {
  private long swigCPtr;

  protected GnMusicIdFileInfo(long cPtr, boolean cMemoryOwn) {
    super(gnsdk_javaJNI.GnMusicIdFileInfo_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnMusicIdFileInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_GnMusicIdFileInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

    public boolean fingerprintWrite(byte[] audioData) throws GnException {
    	return fingerprintWrite(audioData, audioData.length);
    } 

  public String identifier() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_identifier(swigCPtr, this);
  }

  public String fileName() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_fileName__SWIG_0(swigCPtr, this);
  }

  public void fileName(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_fileName__SWIG_1(swigCPtr, this, value);
  }

  public String cddbId() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_cddbId__SWIG_0(swigCPtr, this);
  }

  public void cddbId(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_cddbId__SWIG_1(swigCPtr, this, value);
  }

  public String albumArtist() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_albumArtist__SWIG_0(swigCPtr, this);
  }

  public void albumArtist(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_albumArtist__SWIG_1(swigCPtr, this, value);
  }

  public String albumTitle() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_albumTitle__SWIG_0(swigCPtr, this);
  }

  public void albumTitle(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_albumTitle__SWIG_1(swigCPtr, this, value);
  }

  public String trackArtist() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_trackArtist__SWIG_0(swigCPtr, this);
  }

  public void trackArtist(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_trackArtist__SWIG_1(swigCPtr, this, value);
  }

  public String trackTitle() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_trackTitle__SWIG_0(swigCPtr, this);
  }

  public void trackTitle(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_trackTitle__SWIG_1(swigCPtr, this, value);
  }

  public long trackNumber() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_trackNumber__SWIG_0(swigCPtr, this);
  }

  public void trackNumber(long value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_trackNumber__SWIG_1(swigCPtr, this, value);
  }

  public long discNumber() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_discNumber__SWIG_0(swigCPtr, this);
  }

  public void discNumber(long value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_discNumber__SWIG_1(swigCPtr, this, value);
  }

  public String tagId() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_tagId__SWIG_0(swigCPtr, this);
  }

  public void tagId(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_tagId__SWIG_1(swigCPtr, this, value);
  }

  public String fingerprint() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_fingerprint__SWIG_0(swigCPtr, this);
  }

  public void fingerprint(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_fingerprint__SWIG_1(swigCPtr, this, value);
  }

  public String mediaId() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_mediaId__SWIG_0(swigCPtr, this);
  }

  public void mediaId(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_mediaId__SWIG_1(swigCPtr, this, value);
  }

  public String mui() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_mui__SWIG_0(swigCPtr, this);
  }

  public void mui(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_mui__SWIG_1(swigCPtr, this, value);
  }

  public String cdToc() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_cdToc__SWIG_0(swigCPtr, this);
  }

  public void cdToc(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_cdToc__SWIG_1(swigCPtr, this, value);
  }

  public String tui() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_tui__SWIG_0(swigCPtr, this);
  }

  public void tui(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_tui__SWIG_1(swigCPtr, this, value);
  }

  public String tuiTag() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_tuiTag__SWIG_0(swigCPtr, this);
  }

  public void tuiTag(String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_tuiTag__SWIG_1(swigCPtr, this, value);
  }

  public void fingerprintBegin(long audioSampleRate, long audioSampleSize, long audioChannels) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_fingerprintBegin(swigCPtr, this, audioSampleRate, audioSampleSize, audioChannels);
  }

  public boolean fingerprintWrite(byte[] audioData, long audioDataSize) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_fingerprintWrite__SWIG_0(swigCPtr, this, audioData, audioDataSize);
  }

  public void fingerprintEnd() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFileInfo_fingerprintEnd(swigCPtr, this);
  }

  public void fingerprintFromSource(IGnAudioSource audioSource) throws com.gracenote.gnsdk.GnException {
IGnAudioSourceProxyU audioSourceProxy = new IGnAudioSourceProxyU(audioSource);
    {
      gnsdk_javaJNI.GnMusicIdFileInfo_fingerprintFromSource(swigCPtr, this, IGnAudioSourceProxyL.getCPtr(audioSourceProxy), audioSourceProxy);
    }
  }

  public GnMusicIdFileInfoStatus status() throws com.gracenote.gnsdk.GnException {
    return GnMusicIdFileInfoStatus.swigToEnum(gnsdk_javaJNI.GnMusicIdFileInfo_status(swigCPtr, this));
  }

  public GnError errorInformation() throws com.gracenote.gnsdk.GnException {
    return new GnError(gnsdk_javaJNI.GnMusicIdFileInfo_errorInformation(swigCPtr, this), true);
  }

  public GnResponseAlbums albumResponse() throws com.gracenote.gnsdk.GnException {
    return new GnResponseAlbums(gnsdk_javaJNI.GnMusicIdFileInfo_albumResponse(swigCPtr, this), true);
  }

  public GnResponseDataMatches dataMatchResponse() throws com.gracenote.gnsdk.GnException {
    return new GnResponseDataMatches(gnsdk_javaJNI.GnMusicIdFileInfo_dataMatchResponse(swigCPtr, this), true);
  }

  public boolean fingerprintWrite(java.nio.ByteBuffer audioData, long audioDataSize) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdFileInfo_fingerprintWrite__SWIG_1(swigCPtr, this, audioData, audioDataSize);
  }

}
