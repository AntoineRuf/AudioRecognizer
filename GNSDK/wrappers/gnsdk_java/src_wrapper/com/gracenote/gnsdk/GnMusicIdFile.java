/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class GnMusicIdFile extends GnObject {
  private long swigCPtr;

  protected GnMusicIdFile(long cPtr, boolean cMemoryOwn) {
    super(gnsdk_javaJNI.GnMusicIdFile_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnMusicIdFile obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_GnMusicIdFile(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	private IGnMusicIdFileEvents pEventHandler;
	private IGnMusicIdFileEventsProxyU eventHandlerProxy;

  public GnMusicIdFile(GnUser user, IGnMusicIdFileEvents pEventHandler) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventHandler != null )
	{
		eventHandlerProxy = new IGnMusicIdFileEventsProxyU(pEventHandler);
	}
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnMusicIdFileEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicIdFile__SWIG_0(GnUser.getCPtr(user), user, (eventHandlerProxy==null)?0:IGnMusicIdFileEventsProxyL.getCPtr(eventHandlerProxy), eventHandlerProxy);
}

  public GnMusicIdFile(GnUser user) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventHandler != null )
	{
		eventHandlerProxy = new IGnMusicIdFileEventsProxyU(pEventHandler);
	}
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnMusicIdFileEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicIdFile__SWIG_1(GnUser.getCPtr(user), user);
}

  public static String version() {
    return gnsdk_javaJNI.GnMusicIdFile_version();
  }

  public static String buildDate() {
    return gnsdk_javaJNI.GnMusicIdFile_buildDate();
  }

  public GnMusicIdFileOptions options() {
    return new GnMusicIdFileOptions(gnsdk_javaJNI.GnMusicIdFile_options(swigCPtr, this), false);
  }

  public GnMusicIdFileInfoManager fileInfos() {
    return new GnMusicIdFileInfoManager(gnsdk_javaJNI.GnMusicIdFile_fileInfos(swigCPtr, this), false);
  }

  public void doTrackId(GnMusicIdFileProcessType processType, GnMusicIdFileResponseType responseType) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_doTrackId(swigCPtr, this, processType.swigValue(), responseType.swigValue());
  }

  public void doTrackIdAsync(GnMusicIdFileProcessType processType, GnMusicIdFileResponseType responseType) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_doTrackIdAsync(swigCPtr, this, processType.swigValue(), responseType.swigValue());
  }

  public void doAlbumId(GnMusicIdFileProcessType processType, GnMusicIdFileResponseType responseType) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_doAlbumId(swigCPtr, this, processType.swigValue(), responseType.swigValue());
  }

  public void doAlbumIdAsync(GnMusicIdFileProcessType processType, GnMusicIdFileResponseType responseType) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_doAlbumIdAsync(swigCPtr, this, processType.swigValue(), responseType.swigValue());
  }

  public void doLibraryId(GnMusicIdFileResponseType responseType) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_doLibraryId(swigCPtr, this, responseType.swigValue());
  }

  public void doLibraryIdAsync(GnMusicIdFileResponseType responseType) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_doLibraryIdAsync(swigCPtr, this, responseType.swigValue());
  }

  public void waitForComplete(long timeoutValue) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_waitForComplete__SWIG_0(swigCPtr, this, timeoutValue);
  }

  public void waitForComplete() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdFile_waitForComplete__SWIG_1(swigCPtr, this);
  }

  public IGnMusicIdFileEvents eventHandler() {
	return pEventHandler;
}

  public void cancel() {
    gnsdk_javaJNI.GnMusicIdFile_cancel(swigCPtr, this);
  }

}
