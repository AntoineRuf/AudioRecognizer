/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class GnMusicIdStream extends GnObject {
  private long swigCPtr;

  protected GnMusicIdStream(long cPtr, boolean cMemoryOwn) {
    super(gnsdk_javaJNI.GnMusicIdStream_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnMusicIdStream obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_GnMusicIdStream(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

	private IGnMusicIdStreamEvents pEventDelegate;
	private IGnMusicIdStreamEventsProxyU eventHandlerProxy;
	private IGnAudioSource audioSource;
	private IGnAudioSourceProxyU audioSourceProxyU;
	private GnLocale locale;
	
	public void audioProcess(byte[] audioData) throws com.gracenote.gnsdk.GnException {
		this.audioProcess(audioData,(long)audioData.length);
  	}

  public GnMusicIdStream(GnUser user, GnMusicIdStreamPreset preset, GnLocale locale, IGnMusicIdStreamEvents pEventDelegate) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventDelegate != null )
	{
		eventHandlerProxy = new IGnMusicIdStreamEventsProxyU(pEventDelegate);
	}
	this.pEventDelegate = pEventDelegate; // <REFERENCE_NAME_CHECK><TYPE>IGnMusicIdStreamEvents</TYPE><NAME>pEventDelegate</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	this.locale = locale; 				  // <REFERENCE_NAME_CHECK><TYPE>GnLocale</TYPE><NAME>locale</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicIdStream__SWIG_0(GnUser.getCPtr(user), user, preset.swigValue(), GnLocale.getCPtr(locale), locale, (eventHandlerProxy==null)?0:IGnMusicIdStreamEventsProxyL.getCPtr(eventHandlerProxy), eventHandlerProxy);
}

  public GnMusicIdStream(GnUser user, GnMusicIdStreamPreset preset, IGnMusicIdStreamEvents pEventDelegate) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	if ( pEventDelegate != null )
	{
		eventHandlerProxy = new IGnMusicIdStreamEventsProxyU(pEventDelegate);
	}
	this.pEventDelegate = pEventDelegate; // <REFERENCE_NAME_CHECK><TYPE>IGnMusicIdStreamEvents</TYPE><NAME>pEventDelegate</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	this.locale = locale; 				  // <REFERENCE_NAME_CHECK><TYPE>GnLocale</TYPE><NAME>locale</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnMusicIdStream__SWIG_1(GnUser.getCPtr(user), user, preset.swigValue(), (eventHandlerProxy==null)?0:IGnMusicIdStreamEventsProxyL.getCPtr(eventHandlerProxy), eventHandlerProxy);
}

  public static String version() {
    return gnsdk_javaJNI.GnMusicIdStream_version();
  }

  public static String buildDate() {
    return gnsdk_javaJNI.GnMusicIdStream_buildDate();
  }

  public GnMusicIdStreamOptions options() {
    return new GnMusicIdStreamOptions(gnsdk_javaJNI.GnMusicIdStream_options(swigCPtr, this), false);
  }

  public void audioProcessStart(IGnAudioSource audioSource) throws com.gracenote.gnsdk.GnException {
audioSourceProxyU = new IGnAudioSourceProxyU(audioSource);this.audioSource=audioSource; // <REFERENCE_NAME_CHECK><TYPE>IGnAudioSource</TYPE><NAME>audioSource</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
    {
      gnsdk_javaJNI.GnMusicIdStream_audioProcessStart__SWIG_0(swigCPtr, this, IGnAudioSourceProxyL.getCPtr(audioSourceProxyU), audioSourceProxyU);
    }
  }

  public void audioProcessStart(long samplesPerSecond, long bitsPerSample, long numberOfChannels) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_audioProcessStart__SWIG_1(swigCPtr, this, samplesPerSecond, bitsPerSample, numberOfChannels);
  }

  public void audioProcessStop() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_audioProcessStop(swigCPtr, this);
  }

  public void audioProcess(byte[] audioData, long audioDataLength) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_audioProcess__SWIG_0(swigCPtr, this, audioData, audioDataLength);
  }

  public void identifyAlbum() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_identifyAlbum(swigCPtr, this);
  }

  public void identifyAlbumAsync() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_identifyAlbumAsync(swigCPtr, this);
  }

  public boolean waitForIdentify(long timeout_ms) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdStream_waitForIdentify(swigCPtr, this, timeout_ms);
  }

  public void identifyCancel() throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_identifyCancel(swigCPtr, this);
  }

  public void automaticIdentifcation(boolean bEnable) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_automaticIdentifcation__SWIG_0(swigCPtr, this, bEnable);
  }

  public boolean automaticIdentifcation() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnMusicIdStream_automaticIdentifcation__SWIG_1(swigCPtr, this);
  }

  public void event(GnMusicIdStreamEvent event) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_event(swigCPtr, this, event.swigValue());
  }

  public void broadcastMetadata(String broadcastMetadataKey, String broadcastMetadataValue) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_broadcastMetadata(swigCPtr, this, broadcastMetadataKey, broadcastMetadataValue);
  }

  public IGnMusicIdStreamEvents eventHandler() {
	return pEventDelegate;
}

  public void audioProcess(java.nio.ByteBuffer dataBuffer, long dataSize) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnMusicIdStream_audioProcess__SWIG_1(swigCPtr, this, dataBuffer, dataSize);
  }

}
