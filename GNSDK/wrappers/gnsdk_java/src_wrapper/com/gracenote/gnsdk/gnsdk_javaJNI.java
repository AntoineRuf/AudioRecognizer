/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class gnsdk_javaJNI {
  public final static native void delete_IGnUserStoreProxyL(long jarg1);
  public final static native long IGnUserStoreProxyL_LoadSerializedUser(long jarg1, IGnUserStoreProxyL jarg1_, String jarg2);
  public final static native boolean IGnUserStoreProxyL_StoreSerializedUser(long jarg1, IGnUserStoreProxyL jarg1_, String jarg2, String jarg3);
  public final static native long new_IGnUserStoreProxyL();
  public final static native void IGnUserStoreProxyL_director_connect(IGnUserStoreProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnUserStoreProxyL_change_ownership(IGnUserStoreProxyL obj, long cptr, boolean take_or_release);
  public final static native long new_GnException();
  public final static native void delete_GnException(long jarg1);
  public final static native boolean GnObject_isNull(long jarg1, GnObject jarg1_);
  public final static native long new_GnString__SWIG_0();
  public final static native long new_GnString__SWIG_1(String jarg1);
  public final static native long new_GnString__SWIG_2(long jarg1, GnString jarg1_);
  public final static native void delete_GnString(long jarg1);
  public final static native long GnString_set__SWIG_0(long jarg1, GnString jarg1_, long jarg2, GnString jarg2_);
  public final static native long GnString_set__SWIG_1(long jarg1, GnString jarg1_, String jarg2);
  public final static native String GnString_cStr(long jarg1, GnString jarg1_);
  public final static native boolean GnString_isEmpty(long jarg1, GnString jarg1_);
  public final static native long GnString_manage(String jarg1);
  public final static native void delete_IGnCancellableProxy(long jarg1);
  public final static native void IGnCancellableProxy_setCancel(long jarg1, IGnCancellableProxy jarg1_, boolean jarg2);
  public final static native boolean IGnCancellableProxy_isCancelled(long jarg1, IGnCancellableProxy jarg1_);
  public final static native void delete_IGnStatusEventsProxyL(long jarg1);
  public final static native void IGnStatusEventsProxyL_statusEvent(long jarg1, IGnStatusEventsProxyL jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, IGnCancellableProxy jarg6_);
  public final static native long new_IGnStatusEventsProxyL();
  public final static native void IGnStatusEventsProxyL_director_connect(IGnStatusEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnStatusEventsProxyL_change_ownership(IGnStatusEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native void delete_IGnSystemEventsProxyL(long jarg1);
  public final static native void IGnSystemEventsProxyL_localeUpdateNeeded(long jarg1, IGnSystemEventsProxyL jarg1_, long jarg2, GnLocale jarg2_);
  public final static native void IGnSystemEventsProxyL_listUpdateNeeded(long jarg1, IGnSystemEventsProxyL jarg1_, long jarg2, GnList jarg2_);
  public final static native void IGnSystemEventsProxyL_systemMemoryWarning(long jarg1, IGnSystemEventsProxyL jarg1_, long jarg2, long jarg3);
  public final static native long new_IGnSystemEventsProxyL();
  public final static native void IGnSystemEventsProxyL_director_connect(IGnSystemEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnSystemEventsProxyL_change_ownership(IGnSystemEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native long new_GnUserOptions();
  public final static native int GnUserOptions_lookupMode__SWIG_0(long jarg1, GnUserOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_lookupMode__SWIG_1(long jarg1, GnUserOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnUserOptions_networkProxy__SWIG_0(long jarg1, GnUserOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_networkProxy__SWIG_1(long jarg1, GnUserOptions jarg1_, String jarg2, String jarg3, String jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnUserOptions_networkTimeout__SWIG_0(long jarg1, GnUserOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_networkTimeout__SWIG_1(long jarg1, GnUserOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnUserOptions_networkLoadBalance__SWIG_0(long jarg1, GnUserOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_networkLoadBalance__SWIG_1(long jarg1, GnUserOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnUserOptions_networkInterface__SWIG_0(long jarg1, GnUserOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_networkInterface__SWIG_1(long jarg1, GnUserOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_userInfo(long jarg1, GnUserOptions jarg1_, String jarg2, String jarg3, String jarg4, String jarg5) throws com.gracenote.gnsdk.GnException;
  public final static native long GnUserOptions_cacheExpiration__SWIG_0(long jarg1, GnUserOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_cacheExpiration__SWIG_1(long jarg1, GnUserOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnUserOptions_custom__SWIG_0(long jarg1, GnUserOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnUserOptions_custom__SWIG_1(long jarg1, GnUserOptions jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnUserOptions(long jarg1);
  public final static native long new_GnUser__SWIG_0(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnUser__SWIG_1(String jarg1) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnUser__SWIG_2(long jarg1, IGnUserStoreProxyL jarg1_, String jarg2, String jarg3, String jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnUser_isLocalOnly(long jarg1, GnUser jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnUser_options(long jarg1, GnUser jarg1_);
  public final static native void delete_GnUser(long jarg1);
  public final static native long new_GnError__SWIG_0();
  public final static native long new_GnError__SWIG_1(long jarg1, String jarg2);
  public final static native long new_GnError__SWIG_2(long jarg1, GnError jarg1_);
  public final static native long GnError_errorCode(long jarg1, GnError jarg1_);
  public final static native String GnError_errorDescription(long jarg1, GnError jarg1_);
  public final static native String GnError_errorAPI(long jarg1, GnError jarg1_);
  public final static native String GnError_errorModule(long jarg1, GnError jarg1_);
  public final static native long GnError_sourceErrorCode(long jarg1, GnError jarg1_);
  public final static native String GnError_sourceErrorModule(long jarg1, GnError jarg1_);
  public final static native long GnError_packageId(long jarg1, GnError jarg1_);
  public final static native boolean GnError_isWarning(long jarg1, GnError jarg1_);
  public final static native boolean GnError_isError(long jarg1, GnError jarg1_);
  public final static native boolean GnError_isCancelled(long jarg1, GnError jarg1_);
  public final static native boolean GnError_isErrorCode(long jarg1, GnError jarg1_, long jarg2);
  public final static native boolean GnError_isErrorEqual(long jarg1, long jarg2);
  public final static native void delete_GnError(long jarg1);
  public final static native void GnStoreOps_location(long jarg1, GnStoreOps jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStoreOps_flush(long jarg1, GnStoreOps jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStoreOps_compact(long jarg1, GnStoreOps jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStoreOps_cleanup(long jarg1, GnStoreOps jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnStoreOps(long jarg1);
  public final static native void delete_GnManager(long jarg1);
  public final static native String GnManager_version();
  public final static native String GnManager_productVersion();
  public final static native String GnManager_buildDate();
  public final static native String GnManager_globalIdMagic();
  public final static native long GnManager_userRegister(long jarg1, GnManager jarg1_, int jarg2, String jarg3, String jarg4, String jarg5) throws com.gracenote.gnsdk.GnException;
  public final static native long GnManager_queryCacheStore(long jarg1, GnManager jarg1_);
  public final static native long GnManager_contentCacheStore(long jarg1, GnManager jarg1_);
  public final static native long GnManager_localesStore(long jarg1, GnManager jarg1_);
  public final static native void GnManager_systemEventHandler(long jarg1, GnManager jarg1_, long jarg2, IGnSystemEventsProxyL jarg2_);
  public final static native void GnManager_systemMemoryEvent(long jarg1, GnManager jarg1_, long jarg2);
  public final static native long GnManager_systemMemoryCurrent(long jarg1, GnManager jarg1_);
  public final static native long GnManager_systemMemoryHighWater(long jarg1, GnManager jarg1_, char jarg2);
  public final static native void GnManager_testGracenoteConnection(long jarg1, GnManager jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnManager_eventHandler(long jarg1, GnManager jarg1_);
  public final static native long new_GnManager(String jarg1, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnRenderOptions();
  public final static native long GnRenderOptions_xml(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_json(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_standard(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_credits(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_sortable(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_serialGdos(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_productIds(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_rawTuis(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_gnIds(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_gnUIds(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_genres(long jarg1, GnRenderOptions jarg1_, int jarg2);
  public final static native long GnRenderOptions_DefaultOptions(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_full(long jarg1, GnRenderOptions jarg1_);
  public final static native long GnRenderOptions_clear(long jarg1, GnRenderOptions jarg1_);
  public final static native void delete_GnRenderOptions(long jarg1);
  public final static native long new_GnDataObject__SWIG_0(long jarg1, GnDataObject jarg1_);
  public final static native long new_GnDataObject__SWIG_1(String jarg1, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnDataObject_deserialize(String jarg1) throws com.gracenote.gnsdk.GnException;
  public final static native long GnDataObject_createFromXml(String jarg1) throws com.gracenote.gnsdk.GnException;
  public final static native long GnDataObject_serialize(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnDataObject_stringValueCount(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native String GnDataObject_stringValue__SWIG_0(long jarg1, GnDataObject jarg1_, String jarg2, long jarg3);
  public final static native String GnDataObject_stringValue__SWIG_1(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native long GnDataObject_childCount(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native long GnDataObject_child__SWIG_0(long jarg1, GnDataObject jarg1_, String jarg2, long jarg3);
  public final static native long GnDataObject_child__SWIG_1(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native long GnDataObject_render(long jarg1, GnDataObject jarg1_, long jarg2, GnRenderOptions jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnDataObject_locale(long jarg1, GnDataObject jarg1_, long jarg2, GnLocale jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnDataObject_getType(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnDataObject_isType(long jarg1, GnDataObject jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnDataObject(long jarg1);
  public final static native long new_gn_gdo_string_provider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native String gn_gdo_string_provider_getData(long jarg1, gn_gdo_string_provider jarg1_, long jarg2);
  public final static native long gn_gdo_string_provider_count(long jarg1, gn_gdo_string_provider jarg1_);
  public final static native void delete_gn_gdo_string_provider(long jarg1);
  public final static native void delete_GnAsset(long jarg1);
  public final static native String GnAsset_dimension(long jarg1, GnAsset jarg1_);
  public final static native int GnAsset_bytes(long jarg1, GnAsset jarg1_);
  public final static native int GnAsset_size(long jarg1, GnAsset jarg1_);
  public final static native String GnAsset_url(long jarg1, GnAsset jarg1_);
  public final static native String GnContent_Id(long jarg1, GnContent jarg1_);
  public final static native int GnContent_contentType(long jarg1, GnContent jarg1_);
  public final static native String GnContent_mimeType(long jarg1, GnContent jarg1_);
  public final static native long GnContent_asset(long jarg1, GnContent jarg1_, int jarg2);
  public final static native long GnContent_assets(long jarg1, GnContent jarg1_);
  public final static native void delete_GnContent(long jarg1);
  public final static native String GnExternalId_gnType();
  public final static native long GnExternalId_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnExternalId(long jarg1);
  public final static native String GnExternalId_source(long jarg1, GnExternalId jarg1_);
  public final static native String GnExternalId_type(long jarg1, GnExternalId jarg1_);
  public final static native String GnExternalId_value(long jarg1, GnExternalId jarg1_);
  public final static native void delete_GnRole(long jarg1);
  public final static native String GnRole_category(long jarg1, GnRole jarg1_);
  public final static native String GnRole_role(long jarg1, GnRole jarg1_);
  public final static native String GnName_gnType();
  public final static native long GnName_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnName(long jarg1);
  public final static native String GnName_language(long jarg1, GnName jarg1_);
  public final static native String GnName_languageCode(long jarg1, GnName jarg1_);
  public final static native String GnName_display(long jarg1, GnName jarg1_);
  public final static native String GnName_sortable(long jarg1, GnName jarg1_);
  public final static native String GnName_sortableScheme(long jarg1, GnName jarg1_);
  public final static native String GnName_prefix(long jarg1, GnName jarg1_);
  public final static native String GnName_family(long jarg1, GnName jarg1_);
  public final static native String GnName_given(long jarg1, GnName jarg1_);
  public final static native String GnName_globalId(long jarg1, GnName jarg1_);
  public final static native String GnTitle_gnType();
  public final static native long GnTitle_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnTitle(long jarg1);
  public final static native String GnTitle_language(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_languageCode(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_display(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_prefix(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_sortable(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_sortableScheme(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_mainTitle(long jarg1, GnTitle jarg1_);
  public final static native String GnTitle_edition(long jarg1, GnTitle jarg1_);
  public final static native String GnContributor_gnType();
  public final static native long GnContributor_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnContributor(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnContributor(long jarg1);
  public final static native boolean GnContributor_isFullResult(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_gnId(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_gnUId(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_productId(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_tui(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_tuiTag(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_birthDate(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_birthPlace(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_deathDate(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_deathPlace(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_mediaSpace(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_content(long jarg1, GnContributor jarg1_, int jarg2);
  public final static native long GnContributor_image(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_biographyVideo(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_biography(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_name(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_namesOfficial(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_namesRegional(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_contents(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_externalIds(long jarg1, GnContributor jarg1_);
  public final static native long GnContributor_collaborator(long jarg1, GnContributor jarg1_);
  public final static native String GnContributor_genre(long jarg1, GnContributor jarg1_, int jarg2);
  public final static native String GnContributor_origin(long jarg1, GnContributor jarg1_, int jarg2);
  public final static native String GnContributor_era(long jarg1, GnContributor jarg1_, int jarg2);
  public final static native String GnContributor_artistType(long jarg1, GnContributor jarg1_, int jarg2);
  public final static native boolean GnContributor_collaboratorResult(long jarg1, GnContributor jarg1_);
  public final static native String GnCredit_gnType();
  public final static native long GnCredit_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnCredit(long jarg1);
  public final static native long GnCredit_name(long jarg1, GnCredit jarg1_);
  public final static native long GnCredit_role(long jarg1, GnCredit jarg1_);
  public final static native long GnCredit_contributor(long jarg1, GnCredit jarg1_);
  public final static native String GnAudioWork_gnType();
  public final static native long GnAudioWork_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnAudioWork(long jarg1);
  public final static native long GnAudioWork_title(long jarg1, GnAudioWork jarg1_);
  public final static native long GnAudioWork_credit(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_tui(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_tuiTag(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_tagId(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_gnId(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_gnUId(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_productId(long jarg1, GnAudioWork jarg1_);
  public final static native String GnAudioWork_origin(long jarg1, GnAudioWork jarg1_, int jarg2);
  public final static native String GnAudioWork_era(long jarg1, GnAudioWork jarg1_, int jarg2);
  public final static native String GnAudioWork_genre(long jarg1, GnAudioWork jarg1_, int jarg2);
  public final static native String GnAudioWork_compositionForm(long jarg1, GnAudioWork jarg1_);
  public final static native String GnArtist_gnType();
  public final static native long GnArtist_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnArtist(long jarg1);
  public final static native long GnArtist_name(long jarg1, GnArtist jarg1_);
  public final static native long GnArtist_contributor(long jarg1, GnArtist jarg1_);
  public final static native String GnTrack_gnType();
  public final static native long GnTrack_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnTrack(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnTrack(long jarg1);
  public final static native boolean GnTrack_isFullResult(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_title(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_artist(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_work(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_mood(long jarg1, GnTrack jarg1_, int jarg2);
  public final static native String GnTrack_tempo(long jarg1, GnTrack jarg1_, int jarg2);
  public final static native String GnTrack_genre(long jarg1, GnTrack jarg1_, int jarg2);
  public final static native long GnTrack_content(long jarg1, GnTrack jarg1_, int jarg2);
  public final static native long GnTrack_review(long jarg1, GnTrack jarg1_);
  public final static native boolean GnTrack_matched(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_matchPosition(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_matchDuration(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_currentPosition(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_duration(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_credits(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_contents(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_externalIds(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_tui(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_tuiTag(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_tagId(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_gnId(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_gnUId(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_trackNumber(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_year(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_matchedIdents(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_matchLookupType(long jarg1, GnTrack jarg1_);
  public final static native String GnTrack_matchConfidence(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_matchScore(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_titleClassical(long jarg1, GnTrack jarg1_);
  public final static native long GnTrack_titleRegional(long jarg1, GnTrack jarg1_);
  public final static native String GnResponseTracks_gnType();
  public final static native long GnResponseTracks_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseTracks(long jarg1);
  public final static native long GnResponseTracks_resultCount(long jarg1, GnResponseTracks jarg1_);
  public final static native long GnResponseTracks_rangeStart(long jarg1, GnResponseTracks jarg1_);
  public final static native long GnResponseTracks_rangeEnd(long jarg1, GnResponseTracks jarg1_);
  public final static native long GnResponseTracks_rangeTotal(long jarg1, GnResponseTracks jarg1_);
  public final static native boolean GnResponseTracks_needsDecision(long jarg1, GnResponseTracks jarg1_);
  public final static native long GnResponseTracks_tracks(long jarg1, GnResponseTracks jarg1_);
  public final static native String GnAlbum_gnType();
  public final static native long GnAlbum_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnAlbum(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnAlbum(long jarg1);
  public final static native boolean GnAlbum_isFullResult(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_title(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_artist(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_genre(long jarg1, GnAlbum jarg1_, int jarg2);
  public final static native String GnAlbum_label(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_language(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_languageCode(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_tui(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_tuiTag(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_tagId(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_gnId(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_gnUId(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_globalId(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_discInSet(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_totalInSet(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_year(long jarg1, GnAlbum jarg1_);
  public final static native boolean GnAlbum_isClassical(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_trackCount(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_compilation(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_matchScore(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_track(long jarg1, GnAlbum jarg1_, long jarg2);
  public final static native long GnAlbum_trackMatched__SWIG_0(long jarg1, GnAlbum jarg1_, long jarg2);
  public final static native long GnAlbum_trackMatched__SWIG_1(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_trackMatchNumber__SWIG_0(long jarg1, GnAlbum jarg1_, long jarg2);
  public final static native long GnAlbum_trackMatchNumber__SWIG_1(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_content(long jarg1, GnAlbum jarg1_, int jarg2);
  public final static native long GnAlbum_coverArt(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_review(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_tracks(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_tracksMatched(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_credits(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_contents(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_externalIds(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_titleClassical(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_titleRegional(long jarg1, GnAlbum jarg1_);
  public final static native long GnAlbum_titleRegionalLocale(long jarg1, GnAlbum jarg1_);
  public final static native String GnAlbum_script(long jarg1, GnAlbum jarg1_);
  public final static native String GnResponseAlbums_gnType();
  public final static native long GnResponseAlbums_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseAlbums(long jarg1);
  public final static native long GnResponseAlbums_resultCount(long jarg1, GnResponseAlbums jarg1_);
  public final static native long GnResponseAlbums_rangeStart(long jarg1, GnResponseAlbums jarg1_);
  public final static native long GnResponseAlbums_rangeEnd(long jarg1, GnResponseAlbums jarg1_);
  public final static native long GnResponseAlbums_rangeTotal(long jarg1, GnResponseAlbums jarg1_);
  public final static native boolean GnResponseAlbums_needsDecision(long jarg1, GnResponseAlbums jarg1_);
  public final static native long GnResponseAlbums_albums(long jarg1, GnResponseAlbums jarg1_);
  public final static native void delete_GnDataMatch(long jarg1);
  public final static native boolean GnDataMatch_isAlbum(long jarg1, GnDataMatch jarg1_);
  public final static native boolean GnDataMatch_isContributor(long jarg1, GnDataMatch jarg1_);
  public final static native long GnDataMatch_getAsAlbum(long jarg1, GnDataMatch jarg1_);
  public final static native long GnDataMatch_getAsContributor(long jarg1, GnDataMatch jarg1_);
  public final static native void delete_GnResponseDataMatches(long jarg1);
  public final static native long GnResponseDataMatches_resultCount(long jarg1, GnResponseDataMatches jarg1_);
  public final static native long GnResponseDataMatches_rangeStart(long jarg1, GnResponseDataMatches jarg1_);
  public final static native long GnResponseDataMatches_rangeEnd(long jarg1, GnResponseDataMatches jarg1_);
  public final static native long GnResponseDataMatches_rangeTotal(long jarg1, GnResponseDataMatches jarg1_);
  public final static native boolean GnResponseDataMatches_needsDecision(long jarg1, GnResponseDataMatches jarg1_);
  public final static native long GnResponseDataMatches_dataMatches(long jarg1, GnResponseDataMatches jarg1_);
  public final static native long new_GnContentProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnContentProvider(long jarg1);
  public final static native long GnContentProvider_getData(long jarg1, GnContentProvider jarg1_, long jarg2);
  public final static native long GnContentProvider_count(long jarg1, GnContentProvider jarg1_);
  public final static native void delete_GnContentIterator(long jarg1);
  public final static native long GnContentIterator___ref__(long jarg1, GnContentIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnContentIterator_next(long jarg1, GnContentIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnContentIterator_hasNext(long jarg1, GnContentIterator jarg1_);
  public final static native long GnContentIterator_distance(long jarg1, GnContentIterator jarg1_, long jarg2, GnContentIterator jarg2_);
  public final static native long new_GnContentIterator(long jarg1, GnContentProvider jarg1_, long jarg2);
  public final static native long new_GnContentIterable(long jarg1, GnContentProvider jarg1_, long jarg2);
  public final static native long GnContentIterable_getIterator(long jarg1, GnContentIterable jarg1_);
  public final static native long GnContentIterable_end(long jarg1, GnContentIterable jarg1_);
  public final static native long GnContentIterable_count(long jarg1, GnContentIterable jarg1_);
  public final static native long GnContentIterable_at(long jarg1, GnContentIterable jarg1_, long jarg2);
  public final static native long GnContentIterable_getByIndex(long jarg1, GnContentIterable jarg1_, long jarg2);
  public final static native void delete_GnContentIterable(long jarg1);
  public final static native long new_GnAlbumProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnAlbumProvider(long jarg1);
  public final static native long GnAlbumProvider_getData(long jarg1, GnAlbumProvider jarg1_, long jarg2);
  public final static native long GnAlbumProvider_count(long jarg1, GnAlbumProvider jarg1_);
  public final static native long new_GnTrackProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnTrackProvider(long jarg1);
  public final static native long GnTrackProvider_getData(long jarg1, GnTrackProvider jarg1_, long jarg2);
  public final static native long GnTrackProvider_count(long jarg1, GnTrackProvider jarg1_);
  public final static native long new_GnCreditProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnCreditProvider(long jarg1);
  public final static native long GnCreditProvider_getData(long jarg1, GnCreditProvider jarg1_, long jarg2);
  public final static native long GnCreditProvider_count(long jarg1, GnCreditProvider jarg1_);
  public final static native long new_GnNameProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnNameProvider(long jarg1);
  public final static native long GnNameProvider_getData(long jarg1, GnNameProvider jarg1_, long jarg2);
  public final static native long GnNameProvider_count(long jarg1, GnNameProvider jarg1_);
  public final static native long new_GnDataMatchProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnDataMatchProvider(long jarg1);
  public final static native long GnDataMatchProvider_getData(long jarg1, GnDataMatchProvider jarg1_, long jarg2);
  public final static native long GnDataMatchProvider_count(long jarg1, GnDataMatchProvider jarg1_);
  public final static native long new_GnExternalIdProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnExternalIdProvider(long jarg1);
  public final static native long GnExternalIdProvider_getData(long jarg1, GnExternalIdProvider jarg1_, long jarg2);
  public final static native long GnExternalIdProvider_count(long jarg1, GnExternalIdProvider jarg1_);
  public final static native long new_GnAssetProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnAssetProvider(long jarg1);
  public final static native long GnAssetProvider_getData(long jarg1, GnAssetProvider jarg1_, long jarg2);
  public final static native long GnAssetProvider_count(long jarg1, GnAssetProvider jarg1_);
  public final static native void delete_GnAlbumIterator(long jarg1);
  public final static native long GnAlbumIterator___ref__(long jarg1, GnAlbumIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnAlbumIterator_next(long jarg1, GnAlbumIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnAlbumIterator_hasNext(long jarg1, GnAlbumIterator jarg1_);
  public final static native long GnAlbumIterator_distance(long jarg1, GnAlbumIterator jarg1_, long jarg2, GnAlbumIterator jarg2_);
  public final static native long new_GnAlbumIterator(long jarg1, GnAlbumProvider jarg1_, long jarg2);
  public final static native void delete_GnTrackIterator(long jarg1);
  public final static native long GnTrackIterator___ref__(long jarg1, GnTrackIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnTrackIterator_next(long jarg1, GnTrackIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnTrackIterator_hasNext(long jarg1, GnTrackIterator jarg1_);
  public final static native long GnTrackIterator_distance(long jarg1, GnTrackIterator jarg1_, long jarg2, GnTrackIterator jarg2_);
  public final static native long new_GnTrackIterator(long jarg1, GnTrackProvider jarg1_, long jarg2);
  public final static native void delete_GnCreditIterator(long jarg1);
  public final static native long GnCreditIterator___ref__(long jarg1, GnCreditIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnCreditIterator_next(long jarg1, GnCreditIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnCreditIterator_hasNext(long jarg1, GnCreditIterator jarg1_);
  public final static native long GnCreditIterator_distance(long jarg1, GnCreditIterator jarg1_, long jarg2, GnCreditIterator jarg2_);
  public final static native long new_GnCreditIterator(long jarg1, GnCreditProvider jarg1_, long jarg2);
  public final static native void delete_GnNameIterator(long jarg1);
  public final static native long GnNameIterator___ref__(long jarg1, GnNameIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnNameIterator_next(long jarg1, GnNameIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnNameIterator_hasNext(long jarg1, GnNameIterator jarg1_);
  public final static native long GnNameIterator_distance(long jarg1, GnNameIterator jarg1_, long jarg2, GnNameIterator jarg2_);
  public final static native long new_GnNameIterator(long jarg1, GnNameProvider jarg1_, long jarg2);
  public final static native void delete_GnDataMatchIterator(long jarg1);
  public final static native long GnDataMatchIterator___ref__(long jarg1, GnDataMatchIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnDataMatchIterator_next(long jarg1, GnDataMatchIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnDataMatchIterator_hasNext(long jarg1, GnDataMatchIterator jarg1_);
  public final static native long GnDataMatchIterator_distance(long jarg1, GnDataMatchIterator jarg1_, long jarg2, GnDataMatchIterator jarg2_);
  public final static native long new_GnDataMatchIterator(long jarg1, GnDataMatchProvider jarg1_, long jarg2);
  public final static native void delete_GnExternalIdIterator(long jarg1);
  public final static native long GnExternalIdIterator___ref__(long jarg1, GnExternalIdIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnExternalIdIterator_next(long jarg1, GnExternalIdIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnExternalIdIterator_hasNext(long jarg1, GnExternalIdIterator jarg1_);
  public final static native long GnExternalIdIterator_distance(long jarg1, GnExternalIdIterator jarg1_, long jarg2, GnExternalIdIterator jarg2_);
  public final static native long new_GnExternalIdIterator(long jarg1, GnExternalIdProvider jarg1_, long jarg2);
  public final static native void delete_GnAssetIterator(long jarg1);
  public final static native long GnAssetIterator___ref__(long jarg1, GnAssetIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnAssetIterator_next(long jarg1, GnAssetIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnAssetIterator_hasNext(long jarg1, GnAssetIterator jarg1_);
  public final static native long GnAssetIterator_distance(long jarg1, GnAssetIterator jarg1_, long jarg2, GnAssetIterator jarg2_);
  public final static native long new_GnAssetIterator(long jarg1, GnAssetProvider jarg1_, long jarg2);
  public final static native void delete_GnStringValueIterator(long jarg1);
  public final static native String GnStringValueIterator___ref__(long jarg1, GnStringValueIterator jarg1_);
  public final static native String GnStringValueIterator_next(long jarg1, GnStringValueIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnStringValueIterator_hasNext(long jarg1, GnStringValueIterator jarg1_);
  public final static native long GnStringValueIterator_distance(long jarg1, GnStringValueIterator jarg1_, long jarg2, GnStringValueIterator jarg2_);
  public final static native long new_GnStringValueIterator__SWIG_0(long jarg1, gn_gdo_string_provider jarg1_, long jarg2);
  public final static native long new_GnStringValueIterator__SWIG_1(long jarg1, GnStringValueIterator jarg1_);
  public final static native long new_GnAlbumIterable(long jarg1, GnAlbumProvider jarg1_, long jarg2);
  public final static native long GnAlbumIterable_getIterator(long jarg1, GnAlbumIterable jarg1_);
  public final static native long GnAlbumIterable_end(long jarg1, GnAlbumIterable jarg1_);
  public final static native long GnAlbumIterable_count(long jarg1, GnAlbumIterable jarg1_);
  public final static native long GnAlbumIterable_at(long jarg1, GnAlbumIterable jarg1_, long jarg2);
  public final static native long GnAlbumIterable_getByIndex(long jarg1, GnAlbumIterable jarg1_, long jarg2);
  public final static native void delete_GnAlbumIterable(long jarg1);
  public final static native long new_GnTrackIterable(long jarg1, GnTrackProvider jarg1_, long jarg2);
  public final static native long GnTrackIterable_getIterator(long jarg1, GnTrackIterable jarg1_);
  public final static native long GnTrackIterable_end(long jarg1, GnTrackIterable jarg1_);
  public final static native long GnTrackIterable_count(long jarg1, GnTrackIterable jarg1_);
  public final static native long GnTrackIterable_at(long jarg1, GnTrackIterable jarg1_, long jarg2);
  public final static native long GnTrackIterable_getByIndex(long jarg1, GnTrackIterable jarg1_, long jarg2);
  public final static native void delete_GnTrackIterable(long jarg1);
  public final static native long new_GnCreditIterable(long jarg1, GnCreditProvider jarg1_, long jarg2);
  public final static native long GnCreditIterable_getIterator(long jarg1, GnCreditIterable jarg1_);
  public final static native long GnCreditIterable_end(long jarg1, GnCreditIterable jarg1_);
  public final static native long GnCreditIterable_count(long jarg1, GnCreditIterable jarg1_);
  public final static native long GnCreditIterable_at(long jarg1, GnCreditIterable jarg1_, long jarg2);
  public final static native long GnCreditIterable_getByIndex(long jarg1, GnCreditIterable jarg1_, long jarg2);
  public final static native void delete_GnCreditIterable(long jarg1);
  public final static native long new_GnNameIterable(long jarg1, GnNameProvider jarg1_, long jarg2);
  public final static native long GnNameIterable_getIterator(long jarg1, GnNameIterable jarg1_);
  public final static native long GnNameIterable_end(long jarg1, GnNameIterable jarg1_);
  public final static native long GnNameIterable_count(long jarg1, GnNameIterable jarg1_);
  public final static native long GnNameIterable_at(long jarg1, GnNameIterable jarg1_, long jarg2);
  public final static native long GnNameIterable_getByIndex(long jarg1, GnNameIterable jarg1_, long jarg2);
  public final static native void delete_GnNameIterable(long jarg1);
  public final static native long new_GnDataMatchIterable(long jarg1, GnDataMatchProvider jarg1_, long jarg2);
  public final static native long GnDataMatchIterable_getIterator(long jarg1, GnDataMatchIterable jarg1_);
  public final static native long GnDataMatchIterable_end(long jarg1, GnDataMatchIterable jarg1_);
  public final static native long GnDataMatchIterable_count(long jarg1, GnDataMatchIterable jarg1_);
  public final static native long GnDataMatchIterable_at(long jarg1, GnDataMatchIterable jarg1_, long jarg2);
  public final static native long GnDataMatchIterable_getByIndex(long jarg1, GnDataMatchIterable jarg1_, long jarg2);
  public final static native void delete_GnDataMatchIterable(long jarg1);
  public final static native long new_GnExternalIdIterable(long jarg1, GnExternalIdProvider jarg1_, long jarg2);
  public final static native long GnExternalIdIterable_getIterator(long jarg1, GnExternalIdIterable jarg1_);
  public final static native long GnExternalIdIterable_end(long jarg1, GnExternalIdIterable jarg1_);
  public final static native long GnExternalIdIterable_count(long jarg1, GnExternalIdIterable jarg1_);
  public final static native long GnExternalIdIterable_at(long jarg1, GnExternalIdIterable jarg1_, long jarg2);
  public final static native long GnExternalIdIterable_getByIndex(long jarg1, GnExternalIdIterable jarg1_, long jarg2);
  public final static native void delete_GnExternalIdIterable(long jarg1);
  public final static native long new_GnAssetIterable(long jarg1, GnAssetProvider jarg1_, long jarg2);
  public final static native long GnAssetIterable_getIterator(long jarg1, GnAssetIterable jarg1_);
  public final static native long GnAssetIterable_end(long jarg1, GnAssetIterable jarg1_);
  public final static native long GnAssetIterable_count(long jarg1, GnAssetIterable jarg1_);
  public final static native long GnAssetIterable_at(long jarg1, GnAssetIterable jarg1_, long jarg2);
  public final static native long GnAssetIterable_getByIndex(long jarg1, GnAssetIterable jarg1_, long jarg2);
  public final static native void delete_GnAssetIterable(long jarg1);
  public final static native long new_GnStringValueIterable(long jarg1, gn_gdo_string_provider jarg1_, long jarg2);
  public final static native long GnStringValueIterable_getIterator(long jarg1, GnStringValueIterable jarg1_);
  public final static native long GnStringValueIterable_end(long jarg1, GnStringValueIterable jarg1_);
  public final static native long GnStringValueIterable_count(long jarg1, GnStringValueIterable jarg1_);
  public final static native long GnStringValueIterable_at(long jarg1, GnStringValueIterable jarg1_, long jarg2);
  public final static native long GnStringValueIterable_getByIndex(long jarg1, GnStringValueIterable jarg1_, long jarg2);
  public final static native void delete_GnStringValueIterable(long jarg1);
  public final static native long new_GnListElementChildIterable(long jarg1, list_element_child_provider jarg1_, long jarg2);
  public final static native long GnListElementChildIterable_getIterator(long jarg1, GnListElementChildIterable jarg1_);
  public final static native long GnListElementChildIterable_end(long jarg1, GnListElementChildIterable jarg1_);
  public final static native long GnListElementChildIterable_count(long jarg1, GnListElementChildIterable jarg1_);
  public final static native long GnListElementChildIterable_at(long jarg1, GnListElementChildIterable jarg1_, long jarg2);
  public final static native long GnListElementChildIterable_getByIndex(long jarg1, GnListElementChildIterable jarg1_, long jarg2);
  public final static native void delete_GnListElementChildIterable(long jarg1);
  public final static native void delete_GnListElementChildIterator(long jarg1);
  public final static native long GnListElementChildIterator___ref__(long jarg1, GnListElementChildIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElementChildIterator_next(long jarg1, GnListElementChildIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnListElementChildIterator_hasNext(long jarg1, GnListElementChildIterator jarg1_);
  public final static native long GnListElementChildIterator_distance(long jarg1, GnListElementChildIterator jarg1_, long jarg2, GnListElementChildIterator jarg2_);
  public final static native long new_GnListElementChildIterator(long jarg1, list_element_child_provider jarg1_, long jarg2);
  public final static native long new_GnListElementIterable(long jarg1, list_element_provider jarg1_, long jarg2);
  public final static native long GnListElementIterable_getIterator(long jarg1, GnListElementIterable jarg1_);
  public final static native long GnListElementIterable_end(long jarg1, GnListElementIterable jarg1_);
  public final static native long GnListElementIterable_count(long jarg1, GnListElementIterable jarg1_);
  public final static native long GnListElementIterable_at(long jarg1, GnListElementIterable jarg1_, long jarg2);
  public final static native long GnListElementIterable_getByIndex(long jarg1, GnListElementIterable jarg1_, long jarg2);
  public final static native void delete_GnListElementIterable(long jarg1);
  public final static native void delete_GnListElementIterator(long jarg1);
  public final static native long GnListElementIterator___ref__(long jarg1, GnListElementIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElementIterator_next(long jarg1, GnListElementIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnListElementIterator_hasNext(long jarg1, GnListElementIterator jarg1_);
  public final static native long GnListElementIterator_distance(long jarg1, GnListElementIterator jarg1_, long jarg2, GnListElementIterator jarg2_);
  public final static native long new_GnListElementIterator(long jarg1, list_element_provider jarg1_, long jarg2);
  public final static native long new_list_element_child_provider();
  public final static native long list_element_child_provider_getData(long jarg1, list_element_child_provider jarg1_, long jarg2);
  public final static native long list_element_child_provider_count(long jarg1, list_element_child_provider jarg1_);
  public final static native void delete_list_element_child_provider(long jarg1);
  public final static native void delete_GnListElement(long jarg1);
  public final static native String GnListElement_displayString(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElement_Id(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElement_IdForSubmit(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnListElement_description(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnListElement_ratingTypeId(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElement_parent(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElement_level(long jarg1, GnListElement jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnListElement_children(long jarg1, GnListElement jarg1_);
  public final static native long new_list_element_provider();
  public final static native long list_element_provider_getData(long jarg1, list_element_provider jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long list_element_provider_count(long jarg1, list_element_provider jarg1_);
  public final static native void delete_list_element_provider(long jarg1);
  public final static native long new_GnList__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4, long jarg5, GnUser jarg5_, long jarg6, IGnStatusEventsProxyL jarg6_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnList__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, long jarg5, GnUser jarg5_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnList__SWIG_2(int jarg1, long jarg2, GnLocale jarg2_, long jarg3, GnUser jarg3_, long jarg4, IGnStatusEventsProxyL jarg4_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnList__SWIG_3(int jarg1, long jarg2, GnLocale jarg2_, long jarg3, GnUser jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnList__SWIG_4(String jarg1) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnList_update__SWIG_0(long jarg1, GnList jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnList_update__SWIG_1(long jarg1, GnList jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnList_updateCheck__SWIG_0(long jarg1, GnList jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnList_updateCheck__SWIG_1(long jarg1, GnList jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_serialize(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_renderToXml(long jarg1, GnList jarg1_, long jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native int GnList_type(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native int GnList_descriptor(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native int GnList_language(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native int GnList_region(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnList_revision(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_levelCount(long jarg1, GnList jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_listElements(long jarg1, GnList jarg1_, long jarg2);
  public final static native long GnList_elementById(long jarg1, GnList jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_elementByRange(long jarg1, GnList jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_elementByString(long jarg1, GnList jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnList_elementByGnDataObject(long jarg1, GnList jarg1_, long jarg2, GnDataObject jarg2_, long jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnList(long jarg1);
  public final static native void delete_GnLocaleInfoIterator(long jarg1);
  public final static native long GnLocaleInfoIterator_next(long jarg1, GnLocaleInfoIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnLocaleInfoIterator_hasNext(long jarg1, GnLocaleInfoIterator jarg1_);
  public final static native long GnLocaleInfoIterator_distance(long jarg1, GnLocaleInfoIterator jarg1_, long jarg2, GnLocaleInfoIterator jarg2_);
  public final static native long new_GnLocaleInfoIterator(long jarg1, locale_info_provider jarg1_, long jarg2);
  public final static native long new_GnLocaleInfoIterable(long jarg1, locale_info_provider jarg1_, long jarg2);
  public final static native long GnLocaleInfoIterable_getIterator(long jarg1, GnLocaleInfoIterable jarg1_);
  public final static native long GnLocaleInfoIterable_end(long jarg1, GnLocaleInfoIterable jarg1_);
  public final static native long GnLocaleInfoIterable_count(long jarg1, GnLocaleInfoIterable jarg1_);
  public final static native long GnLocaleInfoIterable_at(long jarg1, GnLocaleInfoIterable jarg1_, long jarg2);
  public final static native long GnLocaleInfoIterable_getByIndex(long jarg1, GnLocaleInfoIterable jarg1_, long jarg2);
  public final static native void delete_GnLocaleInfoIterable(long jarg1);
  public final static native long new_GnLocaleInfo(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native int GnLocaleInfo_group(long jarg1, GnLocaleInfo jarg1_);
  public final static native int GnLocaleInfo_language(long jarg1, GnLocaleInfo jarg1_);
  public final static native int GnLocaleInfo_region(long jarg1, GnLocaleInfo jarg1_);
  public final static native int GnLocaleInfo_descriptor(long jarg1, GnLocaleInfo jarg1_);
  public final static native void delete_GnLocaleInfo(long jarg1);
  public final static native long new_locale_info_provider();
  public final static native void delete_locale_info_provider(long jarg1);
  public final static native long locale_info_provider_getData(long jarg1, locale_info_provider jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long locale_info_provider_count(long jarg1, locale_info_provider jarg1_);
  public final static native long new_GnLocale__SWIG_0(long jarg1, GnLocaleInfo jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLocale__SWIG_1(long jarg1, GnLocaleInfo jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLocale__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4, long jarg5, GnUser jarg5_, long jarg6, IGnStatusEventsProxyL jarg6_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLocale__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4, long jarg5, GnUser jarg5_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLocale__SWIG_4(int jarg1, String jarg2, int jarg3, int jarg4, long jarg5, GnUser jarg5_, long jarg6, IGnStatusEventsProxyL jarg6_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLocale__SWIG_5(int jarg1, String jarg2, int jarg3, int jarg4, long jarg5, GnUser jarg5_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLocale__SWIG_6(String jarg1) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnLocale(long jarg1);
  public final static native long GnLocale_localeInformation(long jarg1, GnLocale jarg1_);
  public final static native String GnLocale_revision(long jarg1, GnLocale jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLocale_setGroupDefault(long jarg1, GnLocale jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLocale_storedLocales();
  public final static native boolean GnLocale_update__SWIG_0(long jarg1, GnLocale jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnLocale_update__SWIG_1(long jarg1, GnLocale jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnLocale_updateCheck__SWIG_0(long jarg1, GnLocale jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnLocale_updateCheck__SWIG_1(long jarg1, GnLocale jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLocale_serialize(long jarg1, GnLocale jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_IGnLogEventsProxyL(long jarg1);
  public final static native boolean IGnLogEventsProxyL_logMessage(long jarg1, IGnLogEventsProxyL jarg1_, int jarg2, int jarg3, long jarg4, String jarg5);
  public final static native long new_IGnLogEventsProxyL();
  public final static native void IGnLogEventsProxyL_director_connect(IGnLogEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnLogEventsProxyL_change_ownership(IGnLogEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native long new_GnLogFilters();
  public final static native long GnLogFilters_clear(long jarg1, GnLogFilters jarg1_);
  public final static native long GnLogFilters_error(long jarg1, GnLogFilters jarg1_);
  public final static native long GnLogFilters_warning(long jarg1, GnLogFilters jarg1_);
  public final static native long GnLogFilters_info(long jarg1, GnLogFilters jarg1_);
  public final static native long GnLogFilters_debug(long jarg1, GnLogFilters jarg1_);
  public final static native long GnLogFilters_all(long jarg1, GnLogFilters jarg1_);
  public final static native void delete_GnLogFilters(long jarg1);
  public final static native long new_GnLogColumns();
  public final static native void GnLogColumns_none(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_timeStamp(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_category(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_packageName(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_thread(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_sourceInfo(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_newLine(long jarg1, GnLogColumns jarg1_);
  public final static native long GnLogColumns_all(long jarg1, GnLogColumns jarg1_);
  public final static native void delete_GnLogColumns(long jarg1);
  public final static native long new_GnLogOptions();
  public final static native long GnLogOptions_synchronous(long jarg1, GnLogOptions jarg1_, boolean jarg2);
  public final static native long GnLogOptions_archive(long jarg1, GnLogOptions jarg1_, boolean jarg2);
  public final static native long GnLogOptions_archiveDaily(long jarg1, GnLogOptions jarg1_);
  public final static native long GnLogOptions_maxSize(long jarg1, GnLogOptions jarg1_, java.math.BigInteger jarg2);
  public final static native void delete_GnLogOptions(long jarg1);
  public final static native long new_GnLog__SWIG_0(String jarg1, long jarg2, IGnLogEventsProxyL jarg2_);
  public final static native long new_GnLog__SWIG_1(String jarg1);
  public final static native long new_GnLog__SWIG_2(String jarg1, long jarg2, GnLogFilters jarg2_, long jarg3, GnLogColumns jarg3_, long jarg4, GnLogOptions jarg4_, long jarg5, IGnLogEventsProxyL jarg5_);
  public final static native long new_GnLog__SWIG_3(String jarg1, long jarg2, GnLogFilters jarg2_, long jarg3, GnLogColumns jarg3_, long jarg4, GnLogOptions jarg4_);
  public final static native void delete_GnLog(long jarg1);
  public final static native void GnLog_options(long jarg1, GnLog jarg1_, long jarg2, GnLogOptions jarg2_);
  public final static native void GnLog_filters(long jarg1, GnLog jarg1_, long jarg2, GnLogFilters jarg2_);
  public final static native void GnLog_columns(long jarg1, GnLog jarg1_, long jarg2, GnLogColumns jarg2_);
  public final static native long GnLog_enable__SWIG_0(long jarg1, GnLog jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLog_enable__SWIG_1(long jarg1, GnLog jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLog_disable__SWIG_0(long jarg1, GnLog jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLog_disable__SWIG_1(long jarg1, GnLog jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLog_register(long jarg1, GnLog jarg1_, int jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLog_write(int jarg1, String jarg2, int jarg3, int jarg4, String jarg5);
  public final static native void delete_IGnAudioSourceProxyL(long jarg1);
  public final static native long IGnAudioSourceProxyL_sourceInit(long jarg1, IGnAudioSourceProxyL jarg1_);
  public final static native void IGnAudioSourceProxyL_sourceClose(long jarg1, IGnAudioSourceProxyL jarg1_);
  public final static native long IGnAudioSourceProxyL_samplesPerSecond(long jarg1, IGnAudioSourceProxyL jarg1_);
  public final static native long IGnAudioSourceProxyL_sampleSizeInBits(long jarg1, IGnAudioSourceProxyL jarg1_);
  public final static native long IGnAudioSourceProxyL_numberOfChannels(long jarg1, IGnAudioSourceProxyL jarg1_);
  public final static native long IGnAudioSourceProxyL_getData(long jarg1, IGnAudioSourceProxyL jarg1_, java.nio.ByteBuffer jarg2, long jarg3);
  public final static native long new_IGnAudioSourceProxyL();
  public final static native void IGnAudioSourceProxyL_director_connect(IGnAudioSourceProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnAudioSourceProxyL_change_ownership(IGnAudioSourceProxyL obj, long cptr, boolean take_or_release);
  public final static native void GnMusicIdOptions_lookupMode(long jarg1, GnMusicIdOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_lookupData(long jarg1, GnMusicIdOptions jarg1_, int jarg2, boolean jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_preferResultLanguage(long jarg1, GnMusicIdOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_preferResultExternalId(long jarg1, GnMusicIdOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_preferResultCoverart(long jarg1, GnMusicIdOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_resultSingle(long jarg1, GnMusicIdOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_revisionCheck(long jarg1, GnMusicIdOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_resultRangeStart(long jarg1, GnMusicIdOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_resultCount(long jarg1, GnMusicIdOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_networkInterface(long jarg1, GnMusicIdOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_custom__SWIG_0(long jarg1, GnMusicIdOptions jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdOptions_custom__SWIG_1(long jarg1, GnMusicIdOptions jarg1_, String jarg2, boolean jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdOptions(long jarg1);
  public final static native long new_GnMusicId__SWIG_0(long jarg1, GnUser jarg1_, long jarg2, IGnStatusEventsProxyL jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnMusicId__SWIG_1(long jarg1, GnUser jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnMusicId__SWIG_2(long jarg1, GnUser jarg1_, long jarg2, GnLocale jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnMusicId__SWIG_3(long jarg1, GnUser jarg1_, long jarg2, GnLocale jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicId(long jarg1);
  public final static native String GnMusicId_version();
  public final static native String GnMusicId_buildDate();
  public final static native String GnMusicId_fingerprintDataGet(long jarg1, GnMusicId jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicId_fingerprintBegin(long jarg1, GnMusicId jarg1_, int jarg2, long jarg3, long jarg4, long jarg5) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMusicId_fingerprintWrite__SWIG_0(long jarg1, GnMusicId jarg1_, byte[] jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicId_fingerprintEnd(long jarg1, GnMusicId jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicId_fingerprintFromSource(long jarg1, GnMusicId jarg1_, long jarg2, IGnAudioSourceProxyL jarg2_, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findAlbums__SWIG_0(long jarg1, GnMusicId jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findAlbums__SWIG_1(long jarg1, GnMusicId jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findAlbums__SWIG_2(long jarg1, GnMusicId jarg1_, String jarg2, String jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findAlbums__SWIG_3(long jarg1, GnMusicId jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findAlbums__SWIG_4(long jarg1, GnMusicId jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findAlbums__SWIG_5(long jarg1, GnMusicId jarg1_, long jarg2, IGnAudioSourceProxyL jarg2_, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_findMatches(long jarg1, GnMusicId jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicId_eventHandler(long jarg1, GnMusicId jarg1_);
  public final static native long GnMusicId_options(long jarg1, GnMusicId jarg1_);
  public final static native void GnMusicId_setCancel(long jarg1, GnMusicId jarg1_, boolean jarg2);
  public final static native boolean GnMusicId_isCancelled(long jarg1, GnMusicId jarg1_);
  public final static native boolean GnMusicId_fingerprintWrite__SWIG_1(long jarg1, GnMusicId jarg1_, java.nio.ByteBuffer jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_identifier(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_fileName__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_fileName__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_cddbId__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_cddbId__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_albumArtist__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_albumArtist__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_albumTitle__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_albumTitle__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_trackArtist__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_trackArtist__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_trackTitle__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_trackTitle__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfo_trackNumber__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_trackNumber__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfo_discNumber__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_discNumber__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_tagId__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_tagId__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_fingerprint__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_fingerprint__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_mediaId__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_mediaId__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_mui__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_mui__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_cdToc__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_cdToc__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_tui__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_tui__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMusicIdFileInfo_tuiTag__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_tuiTag__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_fingerprintBegin(long jarg1, GnMusicIdFileInfo jarg1_, long jarg2, long jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMusicIdFileInfo_fingerprintWrite__SWIG_0(long jarg1, GnMusicIdFileInfo jarg1_, byte[] jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_fingerprintEnd(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfo_fingerprintFromSource(long jarg1, GnMusicIdFileInfo jarg1_, long jarg2, IGnAudioSourceProxyL jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native int GnMusicIdFileInfo_status(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfo_errorInformation(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfo_albumResponse(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfo_dataMatchResponse(long jarg1, GnMusicIdFileInfo jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMusicIdFileInfo_fingerprintWrite__SWIG_1(long jarg1, GnMusicIdFileInfo jarg1_, java.nio.ByteBuffer jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdFileInfo(long jarg1);
  public final static native void delete_musicid_file_info_provider(long jarg1);
  public final static native long musicid_file_info_provider_getData(long jarg1, musicid_file_info_provider jarg1_, long jarg2);
  public final static native long musicid_file_info_provider_count(long jarg1, musicid_file_info_provider jarg1_);
  public final static native void GnMusicIdFileOptions_lookupMode(long jarg1, GnMusicIdFileOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_lookupData(long jarg1, GnMusicIdFileOptions jarg1_, int jarg2, boolean jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_batchSize(long jarg1, GnMusicIdFileOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_onlineProcessing(long jarg1, GnMusicIdFileOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_preferResultLanguage(long jarg1, GnMusicIdFileOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_preferResultExternalId(long jarg1, GnMusicIdFileOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_threadPriority(long jarg1, GnMusicIdFileOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_networkInterface(long jarg1, GnMusicIdFileOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_custom__SWIG_0(long jarg1, GnMusicIdFileOptions jarg1_, String jarg2, boolean jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileOptions_custom__SWIG_1(long jarg1, GnMusicIdFileOptions jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdFileOptions(long jarg1);
  public final static native long GnMusicIdFileInfoManager_add__SWIG_0(long jarg1, GnMusicIdFileInfoManager jarg1_, String jarg2, long jarg3, IGnMusicIdFileInfoEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoManager_add__SWIG_1(long jarg1, GnMusicIdFileInfoManager jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoManager_addFromXml(long jarg1, GnMusicIdFileInfoManager jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoManager_renderToXml(long jarg1, GnMusicIdFileInfoManager jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFileInfoManager_remove(long jarg1, GnMusicIdFileInfoManager jarg1_, long jarg2, GnMusicIdFileInfo jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoManager_getIterator(long jarg1, GnMusicIdFileInfoManager jarg1_);
  public final static native long GnMusicIdFileInfoManager_end(long jarg1, GnMusicIdFileInfoManager jarg1_);
  public final static native long GnMusicIdFileInfoManager_count(long jarg1, GnMusicIdFileInfoManager jarg1_);
  public final static native long GnMusicIdFileInfoManager_at(long jarg1, GnMusicIdFileInfoManager jarg1_, long jarg2);
  public final static native long GnMusicIdFileInfoManager_getByIndex(long jarg1, GnMusicIdFileInfoManager jarg1_, long jarg2);
  public final static native long GnMusicIdFileInfoManager_getByIdentifier(long jarg1, GnMusicIdFileInfoManager jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoManager_getByFilename(long jarg1, GnMusicIdFileInfoManager jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoManager_getByFolder(long jarg1, GnMusicIdFileInfoManager jarg1_, String jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdFileInfoManager(long jarg1);
  public final static native long new_GnMusicIdFile__SWIG_0(long jarg1, GnUser jarg1_, long jarg2, IGnMusicIdFileEventsProxyL jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnMusicIdFile__SWIG_1(long jarg1, GnUser jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdFile(long jarg1);
  public final static native String GnMusicIdFile_version();
  public final static native String GnMusicIdFile_buildDate();
  public final static native long GnMusicIdFile_options(long jarg1, GnMusicIdFile jarg1_);
  public final static native long GnMusicIdFile_fileInfos(long jarg1, GnMusicIdFile jarg1_);
  public final static native void GnMusicIdFile_doTrackId(long jarg1, GnMusicIdFile jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_doTrackIdAsync(long jarg1, GnMusicIdFile jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_doAlbumId(long jarg1, GnMusicIdFile jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_doAlbumIdAsync(long jarg1, GnMusicIdFile jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_doLibraryId(long jarg1, GnMusicIdFile jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_doLibraryIdAsync(long jarg1, GnMusicIdFile jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_waitForComplete__SWIG_0(long jarg1, GnMusicIdFile jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdFile_waitForComplete__SWIG_1(long jarg1, GnMusicIdFile jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFile_eventHandler(long jarg1, GnMusicIdFile jarg1_);
  public final static native void GnMusicIdFile_cancel(long jarg1, GnMusicIdFile jarg1_);
  public final static native void delete_IGnMusicIdFileEventsProxyL(long jarg1);
  public final static native void IGnMusicIdFileEventsProxyL_musicIdFileStatusEvent(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnMusicIdFileInfo jarg2_, int jarg3, long jarg4, long jarg5, long jarg6, IGnCancellableProxy jarg6_);
  public final static native void IGnMusicIdFileEventsProxyL_gatherFingerprint(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnMusicIdFileInfo jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native void IGnMusicIdFileEventsProxyL_gatherMetadata(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnMusicIdFileInfo jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native void IGnMusicIdFileEventsProxyL_musicIdFileAlbumResult(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnResponseAlbums jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native void IGnMusicIdFileEventsProxyL_musicIdFileMatchResult(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnResponseDataMatches jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native void IGnMusicIdFileEventsProxyL_musicIdFileResultNotFound(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnMusicIdFileInfo jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native void IGnMusicIdFileEventsProxyL_musicIdFileComplete(long jarg1, IGnMusicIdFileEventsProxyL jarg1_, long jarg2, GnError jarg2_);
  public final static native long new_IGnMusicIdFileEventsProxyL();
  public final static native void IGnMusicIdFileEventsProxyL_director_connect(IGnMusicIdFileEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnMusicIdFileEventsProxyL_change_ownership(IGnMusicIdFileEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native void delete_IGnMusicIdFileInfoEventsProxyL(long jarg1);
  public final static native void IGnMusicIdFileInfoEventsProxyL_gatherFingerprint(long jarg1, IGnMusicIdFileInfoEventsProxyL jarg1_, long jarg2, GnMusicIdFileInfo jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native void IGnMusicIdFileInfoEventsProxyL_gatherMetadata(long jarg1, IGnMusicIdFileInfoEventsProxyL jarg1_, long jarg2, GnMusicIdFileInfo jarg2_, long jarg3, long jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native long new_IGnMusicIdFileInfoEventsProxyL();
  public final static native void IGnMusicIdFileInfoEventsProxyL_director_connect(IGnMusicIdFileInfoEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnMusicIdFileInfoEventsProxyL_change_ownership(IGnMusicIdFileInfoEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native void delete_GnMusicIdFileInfoIterator(long jarg1);
  public final static native long GnMusicIdFileInfoIterator___ref__(long jarg1, GnMusicIdFileInfoIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdFileInfoIterator_next(long jarg1, GnMusicIdFileInfoIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMusicIdFileInfoIterator_hasNext(long jarg1, GnMusicIdFileInfoIterator jarg1_);
  public final static native long GnMusicIdFileInfoIterator_distance(long jarg1, GnMusicIdFileInfoIterator jarg1_, long jarg2, GnMusicIdFileInfoIterator jarg2_);
  public final static native long new_GnMusicIdFileInfoIterator(long jarg1, musicid_file_info_provider jarg1_, long jarg2);
  public final static native long new_GnMusicIdFileInfoIterable(long jarg1, musicid_file_info_provider jarg1_, long jarg2);
  public final static native long GnMusicIdFileInfoIterable_getIterator(long jarg1, GnMusicIdFileInfoIterable jarg1_);
  public final static native long GnMusicIdFileInfoIterable_end(long jarg1, GnMusicIdFileInfoIterable jarg1_);
  public final static native long GnMusicIdFileInfoIterable_count(long jarg1, GnMusicIdFileInfoIterable jarg1_);
  public final static native long GnMusicIdFileInfoIterable_at(long jarg1, GnMusicIdFileInfoIterable jarg1_, long jarg2);
  public final static native long GnMusicIdFileInfoIterable_getByIndex(long jarg1, GnMusicIdFileInfoIterable jarg1_, long jarg2);
  public final static native void delete_GnMusicIdFileInfoIterable(long jarg1);
  public final static native void GnMusicIdStreamOptions_lookupMode(long jarg1, GnMusicIdStreamOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_lookupData(long jarg1, GnMusicIdStreamOptions jarg1_, int jarg2, boolean jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_preferResultLanguage(long jarg1, GnMusicIdStreamOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_preferResultExternalId(long jarg1, GnMusicIdStreamOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_preferResultCoverart(long jarg1, GnMusicIdStreamOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_resultSingle(long jarg1, GnMusicIdStreamOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_resultRangeStart(long jarg1, GnMusicIdStreamOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_resultCount(long jarg1, GnMusicIdStreamOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_networkInterface(long jarg1, GnMusicIdStreamOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStreamOptions_custom(long jarg1, GnMusicIdStreamOptions jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdStreamOptions(long jarg1);
  public final static native long new_GnMusicIdStream__SWIG_0(long jarg1, GnUser jarg1_, int jarg2, long jarg3, GnLocale jarg3_, long jarg4, IGnMusicIdStreamEventsProxyL jarg4_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnMusicIdStream__SWIG_1(long jarg1, GnUser jarg1_, int jarg2, long jarg3, IGnMusicIdStreamEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMusicIdStream(long jarg1);
  public final static native String GnMusicIdStream_version();
  public final static native String GnMusicIdStream_buildDate();
  public final static native long GnMusicIdStream_options(long jarg1, GnMusicIdStream jarg1_);
  public final static native void GnMusicIdStream_audioProcessStart__SWIG_0(long jarg1, GnMusicIdStream jarg1_, long jarg2, IGnAudioSourceProxyL jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_audioProcessStart__SWIG_1(long jarg1, GnMusicIdStream jarg1_, long jarg2, long jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_audioProcessStop(long jarg1, GnMusicIdStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_audioProcess__SWIG_0(long jarg1, GnMusicIdStream jarg1_, byte[] jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_identifyAlbum(long jarg1, GnMusicIdStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_identifyAlbumAsync(long jarg1, GnMusicIdStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMusicIdStream_waitForIdentify(long jarg1, GnMusicIdStream jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_identifyCancel(long jarg1, GnMusicIdStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_automaticIdentifcation__SWIG_0(long jarg1, GnMusicIdStream jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMusicIdStream_automaticIdentifcation__SWIG_1(long jarg1, GnMusicIdStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_event(long jarg1, GnMusicIdStream jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMusicIdStream_broadcastMetadata(long jarg1, GnMusicIdStream jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMusicIdStream_eventHandler(long jarg1, GnMusicIdStream jarg1_);
  public final static native void GnMusicIdStream_audioProcess__SWIG_1(long jarg1, GnMusicIdStream jarg1_, java.nio.ByteBuffer jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_IGnMusicIdStreamEventsProxyL(long jarg1);
  public final static native void IGnMusicIdStreamEventsProxyL_musicIdStreamProcessingStatusEvent(long jarg1, IGnMusicIdStreamEventsProxyL jarg1_, int jarg2, long jarg3, IGnCancellableProxy jarg3_);
  public final static native void IGnMusicIdStreamEventsProxyL_musicIdStreamIdentifyingStatusEvent(long jarg1, IGnMusicIdStreamEventsProxyL jarg1_, int jarg2, long jarg3, IGnCancellableProxy jarg3_);
  public final static native void IGnMusicIdStreamEventsProxyL_musicIdStreamAlbumResult(long jarg1, IGnMusicIdStreamEventsProxyL jarg1_, long jarg2, GnResponseAlbums jarg2_, long jarg3, IGnCancellableProxy jarg3_);
  public final static native void IGnMusicIdStreamEventsProxyL_musicIdStreamIdentifyCompletedWithError(long jarg1, IGnMusicIdStreamEventsProxyL jarg1_, long jarg2, GnError jarg2_);
  public final static native long new_IGnMusicIdStreamEventsProxyL();
  public final static native void IGnMusicIdStreamEventsProxyL_director_connect(IGnMusicIdStreamEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnMusicIdStreamEventsProxyL_change_ownership(IGnMusicIdStreamEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native void GnLinkOptions_lookupMode(long jarg1, GnLinkOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLinkOptions_trackOrdinal(long jarg1, GnLinkOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLinkOptions_dataSource(long jarg1, GnLinkOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLinkOptions_dataType(long jarg1, GnLinkOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLinkOptions_networkInterface(long jarg1, GnLinkOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLinkOptions_clear(long jarg1, GnLinkOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnLinkOptions(long jarg1);
  public final static native long new_GnLink__SWIG_0(long jarg1, GnDataObject jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLink__SWIG_1(long jarg1, GnDataObject jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLink__SWIG_2(long jarg1, GnListElement jarg1_, long jarg2, GnUser jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnLink__SWIG_3(long jarg1, GnListElement jarg1_, long jarg2, GnUser jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnLink(long jarg1);
  public final static native String GnLink_version();
  public final static native String GnLink_buildDate();
  public final static native long GnLink_count(long jarg1, GnLink jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_options(long jarg1, GnLink jarg1_);
  public final static native long GnLink_coverArt__SWIG_0(long jarg1, GnLink jarg1_, int jarg2, int jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_coverArt__SWIG_1(long jarg1, GnLink jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_genreArt__SWIG_0(long jarg1, GnLink jarg1_, int jarg2, int jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_genreArt__SWIG_1(long jarg1, GnLink jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_image__SWIG_0(long jarg1, GnLink jarg1_, int jarg2, int jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_image__SWIG_1(long jarg1, GnLink jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_artistImage__SWIG_0(long jarg1, GnLink jarg1_, int jarg2, int jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_artistImage__SWIG_1(long jarg1, GnLink jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_review__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_review__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_biography__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_biography__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_artistNews__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_artistNews__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_lyricXML__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_lyricXML__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_lyricText__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_lyricText__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_commentsListener__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_commentsListener__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_commentsRelease__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_commentsRelease__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_news__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_news__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_dspData__SWIG_0(long jarg1, GnLink jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_dspData__SWIG_1(long jarg1, GnLink jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLink_eventHandler(long jarg1, GnLink jarg1_);
  public final static native void GnLink_setCancel(long jarg1, GnLink jarg1_, boolean jarg2);
  public final static native boolean GnLink_isCancelled(long jarg1, GnLink jarg1_);
  public final static native long new_GnLinkContent(byte[] jarg1, long jarg2, int jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnLinkContent(long jarg1);
  public final static native long GnLinkContent_dataSize(long jarg1, GnLinkContent jarg1_);
  public final static native int GnLinkContent_dataType(long jarg1, GnLinkContent jarg1_);
  public final static native void GnLinkContent_dataBuffer(long jarg1, GnLinkContent jarg1_, byte[] jarg2);
  public final static native void GnStorageSqlite_useExternalLibrary(String jarg1) throws com.gracenote.gnsdk.GnException;
  public final static native long GnStorageSqlite_enable() throws com.gracenote.gnsdk.GnException;
  public final static native String GnStorageSqlite_version();
  public final static native String GnStorageSqlite_buildDate();
  public final static native String GnStorageSqlite_sqliteVersion();
  public final static native void GnStorageSqlite_storageLocation__SWIG_0(long jarg1, GnStorageSqlite jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnStorageSqlite_storageLocation__SWIG_1(long jarg1, GnStorageSqlite jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnStorageSqlite_temporaryStorageLocation__SWIG_0(long jarg1, GnStorageSqlite jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStorageSqlite_temporaryStorageLocation__SWIG_1(long jarg1, GnStorageSqlite jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStorageSqlite_maximumCacheFileSize__SWIG_0(long jarg1, GnStorageSqlite jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnStorageSqlite_maximumCacheFileSize__SWIG_1(long jarg1, GnStorageSqlite jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStorageSqlite_maximumCacheMemory__SWIG_0(long jarg1, GnStorageSqlite jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnStorageSqlite_maximumCacheMemory__SWIG_1(long jarg1, GnStorageSqlite jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStorageSqlite_synchronousMode__SWIG_0(long jarg1, GnStorageSqlite jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnStorageSqlite_synchronousMode__SWIG_1(long jarg1, GnStorageSqlite jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnStorageSqlite_journalMode__SWIG_0(long jarg1, GnStorageSqlite jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnStorageSqlite_journalMode__SWIG_1(long jarg1, GnStorageSqlite jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnStorageSqlite(long jarg1);
  public final static native long GnLookupLocal_enable() throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnLookupLocal(long jarg1);
  public final static native String GnLookupLocal_version();
  public final static native String GnLookupLocal_buildDate();
  public final static native void GnLookupLocal_storageCompact(long jarg1, GnLookupLocal jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocal_storageLocation(long jarg1, GnLookupLocal jarg1_, int jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocal_storageValidate(long jarg1, GnLookupLocal jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native String GnLookupLocal_storageInfo(long jarg1, GnLookupLocal jarg1_, int jarg2, int jarg3, long jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLookupLocal_storageInfoCount(long jarg1, GnLookupLocal jarg1_, int jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLookupLocalStream_enable() throws com.gracenote.gnsdk.GnException;
  public final static native String GnLookupLocalStream_version();
  public final static native String GnLookupLocalStream_buildDate();
  public final static native void GnLookupLocalStream_storageLocation(long jarg1, GnLookupLocalStream jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocalStream_engineType__SWIG_0(long jarg1, GnLookupLocalStream jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native int GnLookupLocalStream_engineType__SWIG_1(long jarg1, GnLookupLocalStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocalStream_storageClear(long jarg1, GnLookupLocalStream jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocalStream_storageRemove(long jarg1, GnLookupLocalStream jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnLookupLocalStream(long jarg1);
  public final static native void delete_IGnLookupLocalStreamIngestEventsProxyL(long jarg1);
  public final static native void IGnLookupLocalStreamIngestEventsProxyL_statusEvent(long jarg1, IGnLookupLocalStreamIngestEventsProxyL jarg1_, int jarg2, String jarg3, long jarg4, IGnCancellableProxy jarg4_);
  public final static native long new_IGnLookupLocalStreamIngestEventsProxyL();
  public final static native void IGnLookupLocalStreamIngestEventsProxyL_director_connect(IGnLookupLocalStreamIngestEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnLookupLocalStreamIngestEventsProxyL_change_ownership(IGnLookupLocalStreamIngestEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native long new_GnLookupLocalStreamIngest(long jarg1, IGnLookupLocalStreamIngestEventsProxyL jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocalStreamIngest_write(long jarg1, GnLookupLocalStreamIngest jarg1_, byte[] jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnLookupLocalStreamIngest_flush(long jarg1, GnLookupLocalStreamIngest jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnLookupLocalStreamIngest_eventHandler(long jarg1, GnLookupLocalStreamIngest jarg1_);
  public final static native void delete_GnLookupLocalStreamIngest(long jarg1);
  public final static native String GnDspFeature_featureData(long jarg1, GnDspFeature jarg1_);
  public final static native int GnDspFeature_featureQuality(long jarg1, GnDspFeature jarg1_);
  public final static native void delete_GnDspFeature(long jarg1);
  public final static native long new_GnDsp(long jarg1, GnUser jarg1_, int jarg2, long jarg3, long jarg4, long jarg5) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnDsp(long jarg1);
  public final static native String GnDsp_version();
  public final static native String GnDsp_buildDate();
  public final static native boolean GnDsp_featureAudioWrite(long jarg1, GnDsp jarg1_, byte[] jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnDsp_featureEndOfAudioWrite(long jarg1, GnDsp jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnDsp_featureRetrieve(long jarg1, GnDsp jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnRating(long jarg1);
  public final static native String GnRating_rating(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingType(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingDesc(long jarg1, GnRating jarg1_);
  public final static native long GnRating_ratingTypeId(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingReason(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingMPAA(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingMPAATV(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingFAB(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingCHVRS(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingCanadianTV(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingBBFC(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingCBFC(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingOFLC(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingHongKong(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingFinnish(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingKMRB(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingDVDParental(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingEIRIN(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingINCAA(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingDJTCQ(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingQuebec(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingFrance(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingFSK(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingItaly(long jarg1, GnRating jarg1_);
  public final static native String GnRating_ratingSpain(long jarg1, GnRating jarg1_);
  public final static native void delete_GnVideoCredit(long jarg1);
  public final static native String GnVideoCredit_role(long jarg1, GnVideoCredit jarg1_);
  public final static native long GnVideoCredit_roleId(long jarg1, GnVideoCredit jarg1_);
  public final static native String GnVideoCredit_roleBilling(long jarg1, GnVideoCredit jarg1_);
  public final static native String GnVideoCredit_characterName(long jarg1, GnVideoCredit jarg1_);
  public final static native long GnVideoCredit_rank(long jarg1, GnVideoCredit jarg1_);
  public final static native String GnVideoCredit_genre(long jarg1, GnVideoCredit jarg1_, int jarg2);
  public final static native String GnVideoCredit_artistType(long jarg1, GnVideoCredit jarg1_, int jarg2);
  public final static native String GnVideoCredit_origin(long jarg1, GnVideoCredit jarg1_, int jarg2);
  public final static native String GnVideoCredit_era(long jarg1, GnVideoCredit jarg1_, int jarg2);
  public final static native long GnVideoCredit_officialName(long jarg1, GnVideoCredit jarg1_);
  public final static native long GnVideoCredit_contributor(long jarg1, GnVideoCredit jarg1_);
  public final static native long GnVideoCredit_works(long jarg1, GnVideoCredit jarg1_);
  public final static native long GnVideoCredit_series(long jarg1, GnVideoCredit jarg1_);
  public final static native long GnVideoCredit_seasons(long jarg1, GnVideoCredit jarg1_);
  public final static native String GnVideoChapter_gnType();
  public final static native long GnVideoChapter_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoChapter(long jarg1);
  public final static native long GnVideoChapter_ordinal(long jarg1, GnVideoChapter jarg1_);
  public final static native long GnVideoChapter_duration(long jarg1, GnVideoChapter jarg1_);
  public final static native String GnVideoChapter_durationUnits(long jarg1, GnVideoChapter jarg1_);
  public final static native long GnVideoChapter_officialTitle(long jarg1, GnVideoChapter jarg1_);
  public final static native long GnVideoChapter_videoCredits(long jarg1, GnVideoChapter jarg1_);
  public final static native String GnVideoSeason_gnType();
  public final static native long GnVideoSeason_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideoSeason(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoSeason(long jarg1);
  public final static native boolean GnVideoSeason_isFullResult(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_gnId(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_gnUId(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_productId(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_tui(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_tuiTag(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_videoProductionType(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_videoProductionTypeId(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_dateOriginalRelease(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_duration(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_durationUnits(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_franchiseNum(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_franchiseCount(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_plotSynopsis(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_plotSynopsisLanguage(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_plotTagline(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_serialType(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_workType(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_audience(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_videoMood(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_storyType(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_reputation(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_scenario(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_settingEnvironment(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_settingTimePeriod(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_topic(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_seasonNumber(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_seasonCount(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_source(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_style(long jarg1, GnVideoSeason jarg1_);
  public final static native String GnVideoSeason_genre(long jarg1, GnVideoSeason jarg1_, int jarg2);
  public final static native String GnVideoSeason_origin(long jarg1, GnVideoSeason jarg1_, int jarg2);
  public final static native long GnVideoSeason_rating(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_officialTitle(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_franchiseTitle(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_externalIds(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_works(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_products(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_videoCredits(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_contents(long jarg1, GnVideoSeason jarg1_);
  public final static native long GnVideoSeason_series(long jarg1, GnVideoSeason jarg1_);
  public final static native long new_GnVideoSeries(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoSeries(long jarg1);
  public final static native boolean GnVideoSeries_isFullResult(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_gnId(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_gnUId(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_productId(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_tui(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_tuiTag(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_videoProductionType(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_videoProductionTypeId(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_dateOriginalRelease(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_duration(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_durationUnits(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_franchiseNum(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_franchiseCount(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_plotSynopsis(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_plotTagline(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_plotSynopsisLanguage(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_serialType(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_workType(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_audience(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_videoMood(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_storyType(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_reputation(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_scenario(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_settingEnvironment(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_settingTimePeriod(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_source(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_style(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_topic(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoSeries_genre(long jarg1, GnVideoSeries jarg1_, int jarg2);
  public final static native String GnVideoSeries_origin(long jarg1, GnVideoSeries jarg1_, int jarg2);
  public final static native long GnVideoSeries_rating(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_officialTitle(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_franchiseTitle(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_externalIds(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_works(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_products(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_seasons(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_videoCredits(long jarg1, GnVideoSeries jarg1_);
  public final static native long GnVideoSeries_contents(long jarg1, GnVideoSeries jarg1_);
  public final static native String GnVideoWork_gnType();
  public final static native long GnVideoWork_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideoWork(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoWork(long jarg1);
  public final static native boolean GnVideoWork_isFullResult(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_gnId(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_gnUId(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_productId(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_tui(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_tuiTag(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_tuiMatchProduct(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_videoProductionTypeId(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_videoProductionType(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_dateOriginalRelease(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_duration(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_durationUnits(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_franchiseNum(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_franchiseCount(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seriesEpisode(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seriesEpisodeCount(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seasonEpisode(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seasonEpisodeCount(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seasonCount(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seasonNumber(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_plotSynopsis(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_plotTagline(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_plotSynopsisLanguage(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_serialType(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_workType(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_audience(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_videoMood(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_storyType(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_scenario(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_settingEnvironment(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_settingTimePeriod(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_source(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_style(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_topic(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_reputation(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoWork_origin(long jarg1, GnVideoWork jarg1_, int jarg2);
  public final static native String GnVideoWork_genre(long jarg1, GnVideoWork jarg1_, int jarg2);
  public final static native long GnVideoWork_rating(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_officialTitle(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_franchiseTitle(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seriesTitle(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_products(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_videoCredits(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_seasons(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_series(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_externalIds(long jarg1, GnVideoWork jarg1_);
  public final static native long GnVideoWork_contents(long jarg1, GnVideoWork jarg1_);
  public final static native String GnVideoFeature_gnType();
  public final static native long GnVideoFeature_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoFeature(long jarg1);
  public final static native long GnVideoFeature_ordinal(long jarg1, GnVideoFeature jarg1_);
  public final static native boolean GnVideoFeature_matched(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_videoFeatureType(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_videoProductionType(long jarg1, GnVideoFeature jarg1_);
  public final static native long GnVideoFeature_videoProductionTypeId(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_dateRelease(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_dateOriginalRelease(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_notes(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_aspectRatio(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_aspectRatioType(long jarg1, GnVideoFeature jarg1_);
  public final static native long GnVideoFeature_duration(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_durationUnits(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_plotSummary(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_plotSynopsis(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_plotTagline(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_plotSynopsisLanguage(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoFeature_genre(long jarg1, GnVideoFeature jarg1_, int jarg2);
  public final static native long GnVideoFeature_officialTitle(long jarg1, GnVideoFeature jarg1_);
  public final static native long GnVideoFeature_rating(long jarg1, GnVideoFeature jarg1_);
  public final static native long GnVideoFeature_works(long jarg1, GnVideoFeature jarg1_);
  public final static native long GnVideoFeature_chapters(long jarg1, GnVideoFeature jarg1_);
  public final static native long GnVideoFeature_videoCredits(long jarg1, GnVideoFeature jarg1_);
  public final static native String GnVideoLayer_gnType();
  public final static native long GnVideoLayer_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoLayer(long jarg1);
  public final static native long GnVideoLayer_ordinal(long jarg1, GnVideoLayer jarg1_);
  public final static native boolean GnVideoLayer_matched(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_aspectRatio(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_aspectRatioType(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_tvSystem(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_regionCode(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_videoRegion(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_videoRegionDesc(long jarg1, GnVideoLayer jarg1_);
  public final static native String GnVideoLayer_mediaType(long jarg1, GnVideoLayer jarg1_);
  public final static native long GnVideoLayer_features(long jarg1, GnVideoLayer jarg1_);
  public final static native void delete_GnVideoSide(long jarg1);
  public final static native long GnVideoSide_ordinal(long jarg1, GnVideoSide jarg1_);
  public final static native boolean GnVideoSide_matched(long jarg1, GnVideoSide jarg1_);
  public final static native String GnVideoSide_notes(long jarg1, GnVideoSide jarg1_);
  public final static native long GnVideoSide_officialTitle(long jarg1, GnVideoSide jarg1_);
  public final static native long GnVideoSide_layers(long jarg1, GnVideoSide jarg1_);
  public final static native String GnVideoDisc_gnType();
  public final static native long GnVideoDisc_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideoDisc(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoDisc(long jarg1);
  public final static native String GnVideoDisc_gnId(long jarg1, GnVideoDisc jarg1_);
  public final static native String GnVideoDisc_gnUId(long jarg1, GnVideoDisc jarg1_);
  public final static native String GnVideoDisc_productId(long jarg1, GnVideoDisc jarg1_);
  public final static native String GnVideoDisc_tui(long jarg1, GnVideoDisc jarg1_);
  public final static native String GnVideoDisc_tuiTag(long jarg1, GnVideoDisc jarg1_);
  public final static native long GnVideoDisc_ordinal(long jarg1, GnVideoDisc jarg1_);
  public final static native boolean GnVideoDisc_matched(long jarg1, GnVideoDisc jarg1_);
  public final static native String GnVideoDisc_notes(long jarg1, GnVideoDisc jarg1_);
  public final static native long GnVideoDisc_officialTitle(long jarg1, GnVideoDisc jarg1_);
  public final static native long GnVideoDisc_sides(long jarg1, GnVideoDisc jarg1_);
  public final static native String GnVideoProduct_gnType();
  public final static native long GnVideoProduct_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideoProduct(String jarg1, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoProduct(long jarg1);
  public final static native boolean GnVideoProduct_isFullResult(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_gnId(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_gnUId(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_productId(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_tui(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_tuiTag(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_packageLanguageDisplay(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_packageLanguage(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_videoProductionType(long jarg1, GnVideoProduct jarg1_);
  public final static native long GnVideoProduct_videoProductionTypeId(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_dateOriginalRelease(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_dateRelease(long jarg1, GnVideoProduct jarg1_);
  public final static native long GnVideoProduct_duration(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_durationUnits(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_aspectRatio(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_aspectRatioType(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_videoRegion(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_videoRegionDesc(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_notes(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_commerceType(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnVideoProduct_genre(long jarg1, GnVideoProduct jarg1_, int jarg2);
  public final static native long GnVideoProduct_rating(long jarg1, GnVideoProduct jarg1_);
  public final static native long GnVideoProduct_officialTitle(long jarg1, GnVideoProduct jarg1_);
  public final static native long GnVideoProduct_externalIds(long jarg1, GnVideoProduct jarg1_);
  public final static native long GnVideoProduct_discs(long jarg1, GnVideoProduct jarg1_);
  public final static native long GnVideoProduct_contents(long jarg1, GnVideoProduct jarg1_);
  public final static native String GnResponseVideoSuggestions_gnType();
  public final static native long GnResponseVideoSuggestions_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseVideoSuggestions(long jarg1);
  public final static native long GnResponseVideoSuggestions_resultCount(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native long GnResponseVideoSuggestions_rangeStart(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native long GnResponseVideoSuggestions_rangeEnd(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native long GnResponseVideoSuggestions_rangeTotal(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native boolean GnResponseVideoSuggestions_needsDecision(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native String GnResponseVideoSuggestions_suggestionText(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native String GnResponseVideoSuggestions_suggestionTitle(long jarg1, GnResponseVideoSuggestions jarg1_, long jarg2);
  public final static native String GnResponseVideoSuggestions_suggestionType(long jarg1, GnResponseVideoSuggestions jarg1_);
  public final static native String GnResponseVideoObjects_gnType();
  public final static native long GnResponseVideoObjects_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseVideoObjects(long jarg1);
  public final static native long GnResponseVideoObjects_resultCount(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_rangeStart(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_rangeEnd(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_rangeTotal(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native boolean GnResponseVideoObjects_needsDecision(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_products(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_works(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_seasons(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_series(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native long GnResponseVideoObjects_contributors(long jarg1, GnResponseVideoObjects jarg1_);
  public final static native void delete_GnResponseContributors(long jarg1);
  public final static native long GnResponseContributors_resultCount(long jarg1, GnResponseContributors jarg1_);
  public final static native long GnResponseContributors_rangeStart(long jarg1, GnResponseContributors jarg1_);
  public final static native long GnResponseContributors_rangeEnd(long jarg1, GnResponseContributors jarg1_);
  public final static native long GnResponseContributors_rangeTotal(long jarg1, GnResponseContributors jarg1_);
  public final static native boolean GnResponseContributors_needsDecision(long jarg1, GnResponseContributors jarg1_);
  public final static native long GnResponseContributors_contributors(long jarg1, GnResponseContributors jarg1_);
  public final static native String GnResponseVideoSeries_gnType();
  public final static native long GnResponseVideoSeries_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseVideoSeries(long jarg1);
  public final static native long GnResponseVideoSeries_resultCount(long jarg1, GnResponseVideoSeries jarg1_);
  public final static native long GnResponseVideoSeries_rangeStart(long jarg1, GnResponseVideoSeries jarg1_);
  public final static native long GnResponseVideoSeries_rangeEnd(long jarg1, GnResponseVideoSeries jarg1_);
  public final static native long GnResponseVideoSeries_rangeTotal(long jarg1, GnResponseVideoSeries jarg1_);
  public final static native boolean GnResponseVideoSeries_needsDecision(long jarg1, GnResponseVideoSeries jarg1_);
  public final static native long GnResponseVideoSeries_series(long jarg1, GnResponseVideoSeries jarg1_);
  public final static native String GnResponseVideoSeasons_gnType();
  public final static native long GnResponseVideoSeasons_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseVideoSeasons(long jarg1);
  public final static native long GnResponseVideoSeasons_resultCount(long jarg1, GnResponseVideoSeasons jarg1_);
  public final static native long GnResponseVideoSeasons_rangeStart(long jarg1, GnResponseVideoSeasons jarg1_);
  public final static native long GnResponseVideoSeasons_rangeEnd(long jarg1, GnResponseVideoSeasons jarg1_);
  public final static native long GnResponseVideoSeasons_rangeTotal(long jarg1, GnResponseVideoSeasons jarg1_);
  public final static native boolean GnResponseVideoSeasons_needsDecision(long jarg1, GnResponseVideoSeasons jarg1_);
  public final static native long GnResponseVideoSeasons_seasons(long jarg1, GnResponseVideoSeasons jarg1_);
  public final static native String GnResponseVideoWork_gnType();
  public final static native long GnResponseVideoWork_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseVideoWork(long jarg1);
  public final static native long GnResponseVideoWork_resultCount(long jarg1, GnResponseVideoWork jarg1_);
  public final static native long GnResponseVideoWork_rangeStart(long jarg1, GnResponseVideoWork jarg1_);
  public final static native long GnResponseVideoWork_rangeEnd(long jarg1, GnResponseVideoWork jarg1_);
  public final static native long GnResponseVideoWork_rangeTotal(long jarg1, GnResponseVideoWork jarg1_);
  public final static native boolean GnResponseVideoWork_needsDecision(long jarg1, GnResponseVideoWork jarg1_);
  public final static native long GnResponseVideoWork_works(long jarg1, GnResponseVideoWork jarg1_);
  public final static native String GnResponseVideoProduct_gnType();
  public final static native long GnResponseVideoProduct_from(long jarg1, GnDataObject jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnResponseVideoProduct(long jarg1);
  public final static native long GnResponseVideoProduct_resultCount(long jarg1, GnResponseVideoProduct jarg1_);
  public final static native long GnResponseVideoProduct_rangeStart(long jarg1, GnResponseVideoProduct jarg1_);
  public final static native long GnResponseVideoProduct_rangeEnd(long jarg1, GnResponseVideoProduct jarg1_);
  public final static native long GnResponseVideoProduct_rangeTotal(long jarg1, GnResponseVideoProduct jarg1_);
  public final static native boolean GnResponseVideoProduct_needsDecision(long jarg1, GnResponseVideoProduct jarg1_);
  public final static native long GnResponseVideoProduct_products(long jarg1, GnResponseVideoProduct jarg1_);
  public final static native long new_GnVideoProductProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoProductProvider(long jarg1);
  public final static native long GnVideoProductProvider_getData(long jarg1, GnVideoProductProvider jarg1_, long jarg2);
  public final static native long GnVideoProductProvider_count(long jarg1, GnVideoProductProvider jarg1_);
  public final static native long new_GnVideoWorkProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoWorkProvider(long jarg1);
  public final static native long GnVideoWorkProvider_getData(long jarg1, GnVideoWorkProvider jarg1_, long jarg2);
  public final static native long GnVideoWorkProvider_count(long jarg1, GnVideoWorkProvider jarg1_);
  public final static native long new_GnVideoSeasonProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoSeasonProvider(long jarg1);
  public final static native long GnVideoSeasonProvider_getData(long jarg1, GnVideoSeasonProvider jarg1_, long jarg2);
  public final static native long GnVideoSeasonProvider_count(long jarg1, GnVideoSeasonProvider jarg1_);
  public final static native long new_GnVideoSeriesProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoSeriesProvider(long jarg1);
  public final static native long GnVideoSeriesProvider_getData(long jarg1, GnVideoSeriesProvider jarg1_, long jarg2);
  public final static native long GnVideoSeriesProvider_count(long jarg1, GnVideoSeriesProvider jarg1_);
  public final static native long new_GnVideoDiscProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoDiscProvider(long jarg1);
  public final static native long GnVideoDiscProvider_getData(long jarg1, GnVideoDiscProvider jarg1_, long jarg2);
  public final static native long GnVideoDiscProvider_count(long jarg1, GnVideoDiscProvider jarg1_);
  public final static native long new_GnVideoSideProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoSideProvider(long jarg1);
  public final static native long GnVideoSideProvider_getData(long jarg1, GnVideoSideProvider jarg1_, long jarg2);
  public final static native long GnVideoSideProvider_count(long jarg1, GnVideoSideProvider jarg1_);
  public final static native long new_GnVideoLayerProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoLayerProvider(long jarg1);
  public final static native long GnVideoLayerProvider_getData(long jarg1, GnVideoLayerProvider jarg1_, long jarg2);
  public final static native long GnVideoLayerProvider_count(long jarg1, GnVideoLayerProvider jarg1_);
  public final static native long new_GnVideoFeatureProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoFeatureProvider(long jarg1);
  public final static native long GnVideoFeatureProvider_getData(long jarg1, GnVideoFeatureProvider jarg1_, long jarg2);
  public final static native long GnVideoFeatureProvider_count(long jarg1, GnVideoFeatureProvider jarg1_);
  public final static native long new_GnVideoChapterProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoChapterProvider(long jarg1);
  public final static native long GnVideoChapterProvider_getData(long jarg1, GnVideoChapterProvider jarg1_, long jarg2);
  public final static native long GnVideoChapterProvider_count(long jarg1, GnVideoChapterProvider jarg1_);
  public final static native long new_GnVideoCreditProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnVideoCreditProvider(long jarg1);
  public final static native long GnVideoCreditProvider_getData(long jarg1, GnVideoCreditProvider jarg1_, long jarg2);
  public final static native long GnVideoCreditProvider_count(long jarg1, GnVideoCreditProvider jarg1_);
  public final static native long new_GnContributorProvider(long jarg1, GnDataObject jarg1_, String jarg2);
  public final static native void delete_GnContributorProvider(long jarg1);
  public final static native long GnContributorProvider_getData(long jarg1, GnContributorProvider jarg1_, long jarg2);
  public final static native long GnContributorProvider_count(long jarg1, GnContributorProvider jarg1_);
  public final static native void delete_GnVideoProductIterator(long jarg1);
  public final static native long GnVideoProductIterator___ref__(long jarg1, GnVideoProductIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoProductIterator_next(long jarg1, GnVideoProductIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoProductIterator_hasNext(long jarg1, GnVideoProductIterator jarg1_);
  public final static native long GnVideoProductIterator_distance(long jarg1, GnVideoProductIterator jarg1_, long jarg2, GnVideoProductIterator jarg2_);
  public final static native long new_GnVideoProductIterator(long jarg1, GnVideoProductProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoWorkIterator(long jarg1);
  public final static native long GnVideoWorkIterator___ref__(long jarg1, GnVideoWorkIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoWorkIterator_next(long jarg1, GnVideoWorkIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoWorkIterator_hasNext(long jarg1, GnVideoWorkIterator jarg1_);
  public final static native long GnVideoWorkIterator_distance(long jarg1, GnVideoWorkIterator jarg1_, long jarg2, GnVideoWorkIterator jarg2_);
  public final static native long new_GnVideoWorkIterator(long jarg1, GnVideoWorkProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoSeasonIterator(long jarg1);
  public final static native long GnVideoSeasonIterator___ref__(long jarg1, GnVideoSeasonIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoSeasonIterator_next(long jarg1, GnVideoSeasonIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoSeasonIterator_hasNext(long jarg1, GnVideoSeasonIterator jarg1_);
  public final static native long GnVideoSeasonIterator_distance(long jarg1, GnVideoSeasonIterator jarg1_, long jarg2, GnVideoSeasonIterator jarg2_);
  public final static native long new_GnVideoSeasonIterator(long jarg1, GnVideoSeasonProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoSeriesIterator(long jarg1);
  public final static native long GnVideoSeriesIterator___ref__(long jarg1, GnVideoSeriesIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoSeriesIterator_next(long jarg1, GnVideoSeriesIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoSeriesIterator_hasNext(long jarg1, GnVideoSeriesIterator jarg1_);
  public final static native long GnVideoSeriesIterator_distance(long jarg1, GnVideoSeriesIterator jarg1_, long jarg2, GnVideoSeriesIterator jarg2_);
  public final static native long new_GnVideoSeriesIterator(long jarg1, GnVideoSeriesProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoDiscIterator(long jarg1);
  public final static native long GnVideoDiscIterator___ref__(long jarg1, GnVideoDiscIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoDiscIterator_next(long jarg1, GnVideoDiscIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoDiscIterator_hasNext(long jarg1, GnVideoDiscIterator jarg1_);
  public final static native long GnVideoDiscIterator_distance(long jarg1, GnVideoDiscIterator jarg1_, long jarg2, GnVideoDiscIterator jarg2_);
  public final static native long new_GnVideoDiscIterator(long jarg1, GnVideoDiscProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoSideIterator(long jarg1);
  public final static native long GnVideoSideIterator___ref__(long jarg1, GnVideoSideIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoSideIterator_next(long jarg1, GnVideoSideIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoSideIterator_hasNext(long jarg1, GnVideoSideIterator jarg1_);
  public final static native long GnVideoSideIterator_distance(long jarg1, GnVideoSideIterator jarg1_, long jarg2, GnVideoSideIterator jarg2_);
  public final static native long new_GnVideoSideIterator(long jarg1, GnVideoSideProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoLayerIterator(long jarg1);
  public final static native long GnVideoLayerIterator___ref__(long jarg1, GnVideoLayerIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoLayerIterator_next(long jarg1, GnVideoLayerIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoLayerIterator_hasNext(long jarg1, GnVideoLayerIterator jarg1_);
  public final static native long GnVideoLayerIterator_distance(long jarg1, GnVideoLayerIterator jarg1_, long jarg2, GnVideoLayerIterator jarg2_);
  public final static native long new_GnVideoLayerIterator(long jarg1, GnVideoLayerProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoFeatureIterator(long jarg1);
  public final static native long GnVideoFeatureIterator___ref__(long jarg1, GnVideoFeatureIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoFeatureIterator_next(long jarg1, GnVideoFeatureIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoFeatureIterator_hasNext(long jarg1, GnVideoFeatureIterator jarg1_);
  public final static native long GnVideoFeatureIterator_distance(long jarg1, GnVideoFeatureIterator jarg1_, long jarg2, GnVideoFeatureIterator jarg2_);
  public final static native long new_GnVideoFeatureIterator(long jarg1, GnVideoFeatureProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoChapterIterator(long jarg1);
  public final static native long GnVideoChapterIterator___ref__(long jarg1, GnVideoChapterIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoChapterIterator_next(long jarg1, GnVideoChapterIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoChapterIterator_hasNext(long jarg1, GnVideoChapterIterator jarg1_);
  public final static native long GnVideoChapterIterator_distance(long jarg1, GnVideoChapterIterator jarg1_, long jarg2, GnVideoChapterIterator jarg2_);
  public final static native long new_GnVideoChapterIterator(long jarg1, GnVideoChapterProvider jarg1_, long jarg2);
  public final static native void delete_GnVideoCreditIterator(long jarg1);
  public final static native long GnVideoCreditIterator___ref__(long jarg1, GnVideoCreditIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideoCreditIterator_next(long jarg1, GnVideoCreditIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnVideoCreditIterator_hasNext(long jarg1, GnVideoCreditIterator jarg1_);
  public final static native long GnVideoCreditIterator_distance(long jarg1, GnVideoCreditIterator jarg1_, long jarg2, GnVideoCreditIterator jarg2_);
  public final static native long new_GnVideoCreditIterator(long jarg1, GnVideoCreditProvider jarg1_, long jarg2);
  public final static native void delete_GnContributorIterator(long jarg1);
  public final static native long GnContributorIterator___ref__(long jarg1, GnContributorIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnContributorIterator_next(long jarg1, GnContributorIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnContributorIterator_hasNext(long jarg1, GnContributorIterator jarg1_);
  public final static native long GnContributorIterator_distance(long jarg1, GnContributorIterator jarg1_, long jarg2, GnContributorIterator jarg2_);
  public final static native long new_GnContributorIterator(long jarg1, GnContributorProvider jarg1_, long jarg2);
  public final static native long new_GnVideoProductIterable(long jarg1, GnVideoProductProvider jarg1_, long jarg2);
  public final static native long GnVideoProductIterable_getIterator(long jarg1, GnVideoProductIterable jarg1_);
  public final static native long GnVideoProductIterable_end(long jarg1, GnVideoProductIterable jarg1_);
  public final static native long GnVideoProductIterable_count(long jarg1, GnVideoProductIterable jarg1_);
  public final static native long GnVideoProductIterable_at(long jarg1, GnVideoProductIterable jarg1_, long jarg2);
  public final static native long GnVideoProductIterable_getByIndex(long jarg1, GnVideoProductIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoProductIterable(long jarg1);
  public final static native long new_GnVideoWorkIterable(long jarg1, GnVideoWorkProvider jarg1_, long jarg2);
  public final static native long GnVideoWorkIterable_getIterator(long jarg1, GnVideoWorkIterable jarg1_);
  public final static native long GnVideoWorkIterable_end(long jarg1, GnVideoWorkIterable jarg1_);
  public final static native long GnVideoWorkIterable_count(long jarg1, GnVideoWorkIterable jarg1_);
  public final static native long GnVideoWorkIterable_at(long jarg1, GnVideoWorkIterable jarg1_, long jarg2);
  public final static native long GnVideoWorkIterable_getByIndex(long jarg1, GnVideoWorkIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoWorkIterable(long jarg1);
  public final static native long new_GnVideoSeasonIterable(long jarg1, GnVideoSeasonProvider jarg1_, long jarg2);
  public final static native long GnVideoSeasonIterable_getIterator(long jarg1, GnVideoSeasonIterable jarg1_);
  public final static native long GnVideoSeasonIterable_end(long jarg1, GnVideoSeasonIterable jarg1_);
  public final static native long GnVideoSeasonIterable_count(long jarg1, GnVideoSeasonIterable jarg1_);
  public final static native long GnVideoSeasonIterable_at(long jarg1, GnVideoSeasonIterable jarg1_, long jarg2);
  public final static native long GnVideoSeasonIterable_getByIndex(long jarg1, GnVideoSeasonIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoSeasonIterable(long jarg1);
  public final static native long new_GnVideoSeriesIterable(long jarg1, GnVideoSeriesProvider jarg1_, long jarg2);
  public final static native long GnVideoSeriesIterable_getIterator(long jarg1, GnVideoSeriesIterable jarg1_);
  public final static native long GnVideoSeriesIterable_end(long jarg1, GnVideoSeriesIterable jarg1_);
  public final static native long GnVideoSeriesIterable_count(long jarg1, GnVideoSeriesIterable jarg1_);
  public final static native long GnVideoSeriesIterable_at(long jarg1, GnVideoSeriesIterable jarg1_, long jarg2);
  public final static native long GnVideoSeriesIterable_getByIndex(long jarg1, GnVideoSeriesIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoSeriesIterable(long jarg1);
  public final static native long new_GnVideoDiscIterable(long jarg1, GnVideoDiscProvider jarg1_, long jarg2);
  public final static native long GnVideoDiscIterable_getIterator(long jarg1, GnVideoDiscIterable jarg1_);
  public final static native long GnVideoDiscIterable_end(long jarg1, GnVideoDiscIterable jarg1_);
  public final static native long GnVideoDiscIterable_count(long jarg1, GnVideoDiscIterable jarg1_);
  public final static native long GnVideoDiscIterable_at(long jarg1, GnVideoDiscIterable jarg1_, long jarg2);
  public final static native long GnVideoDiscIterable_getByIndex(long jarg1, GnVideoDiscIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoDiscIterable(long jarg1);
  public final static native long new_GnVideoSideIterable(long jarg1, GnVideoSideProvider jarg1_, long jarg2);
  public final static native long GnVideoSideIterable_getIterator(long jarg1, GnVideoSideIterable jarg1_);
  public final static native long GnVideoSideIterable_end(long jarg1, GnVideoSideIterable jarg1_);
  public final static native long GnVideoSideIterable_count(long jarg1, GnVideoSideIterable jarg1_);
  public final static native long GnVideoSideIterable_at(long jarg1, GnVideoSideIterable jarg1_, long jarg2);
  public final static native long GnVideoSideIterable_getByIndex(long jarg1, GnVideoSideIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoSideIterable(long jarg1);
  public final static native long new_GnVideoLayerIterable(long jarg1, GnVideoLayerProvider jarg1_, long jarg2);
  public final static native long GnVideoLayerIterable_getIterator(long jarg1, GnVideoLayerIterable jarg1_);
  public final static native long GnVideoLayerIterable_end(long jarg1, GnVideoLayerIterable jarg1_);
  public final static native long GnVideoLayerIterable_count(long jarg1, GnVideoLayerIterable jarg1_);
  public final static native long GnVideoLayerIterable_at(long jarg1, GnVideoLayerIterable jarg1_, long jarg2);
  public final static native long GnVideoLayerIterable_getByIndex(long jarg1, GnVideoLayerIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoLayerIterable(long jarg1);
  public final static native long new_GnVideoFeatureIterable(long jarg1, GnVideoFeatureProvider jarg1_, long jarg2);
  public final static native long GnVideoFeatureIterable_getIterator(long jarg1, GnVideoFeatureIterable jarg1_);
  public final static native long GnVideoFeatureIterable_end(long jarg1, GnVideoFeatureIterable jarg1_);
  public final static native long GnVideoFeatureIterable_count(long jarg1, GnVideoFeatureIterable jarg1_);
  public final static native long GnVideoFeatureIterable_at(long jarg1, GnVideoFeatureIterable jarg1_, long jarg2);
  public final static native long GnVideoFeatureIterable_getByIndex(long jarg1, GnVideoFeatureIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoFeatureIterable(long jarg1);
  public final static native long new_GnVideoChapterIterable(long jarg1, GnVideoChapterProvider jarg1_, long jarg2);
  public final static native long GnVideoChapterIterable_getIterator(long jarg1, GnVideoChapterIterable jarg1_);
  public final static native long GnVideoChapterIterable_end(long jarg1, GnVideoChapterIterable jarg1_);
  public final static native long GnVideoChapterIterable_count(long jarg1, GnVideoChapterIterable jarg1_);
  public final static native long GnVideoChapterIterable_at(long jarg1, GnVideoChapterIterable jarg1_, long jarg2);
  public final static native long GnVideoChapterIterable_getByIndex(long jarg1, GnVideoChapterIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoChapterIterable(long jarg1);
  public final static native long new_GnVideoCreditIterable(long jarg1, GnVideoCreditProvider jarg1_, long jarg2);
  public final static native long GnVideoCreditIterable_getIterator(long jarg1, GnVideoCreditIterable jarg1_);
  public final static native long GnVideoCreditIterable_end(long jarg1, GnVideoCreditIterable jarg1_);
  public final static native long GnVideoCreditIterable_count(long jarg1, GnVideoCreditIterable jarg1_);
  public final static native long GnVideoCreditIterable_at(long jarg1, GnVideoCreditIterable jarg1_, long jarg2);
  public final static native long GnVideoCreditIterable_getByIndex(long jarg1, GnVideoCreditIterable jarg1_, long jarg2);
  public final static native void delete_GnVideoCreditIterable(long jarg1);
  public final static native long new_GnContributorIterable(long jarg1, GnContributorProvider jarg1_, long jarg2);
  public final static native long GnContributorIterable_getIterator(long jarg1, GnContributorIterable jarg1_);
  public final static native long GnContributorIterable_end(long jarg1, GnContributorIterable jarg1_);
  public final static native long GnContributorIterable_count(long jarg1, GnContributorIterable jarg1_);
  public final static native long GnContributorIterable_at(long jarg1, GnContributorIterable jarg1_, long jarg2);
  public final static native long GnContributorIterable_getByIndex(long jarg1, GnContributorIterable jarg1_, long jarg2);
  public final static native void delete_GnContributorIterable(long jarg1);
  public final static native void GnVideoOptions_resultPreferLanguage(long jarg1, GnVideoOptions jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_resultRangeStart(long jarg1, GnVideoOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_resultCount(long jarg1, GnVideoOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_lookupData(long jarg1, GnVideoOptions jarg1_, int jarg2, boolean jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_queryNoCache(long jarg1, GnVideoOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_queryCommerceType(long jarg1, GnVideoOptions jarg1_, boolean jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_resultFilter__SWIG_0(long jarg1, GnVideoOptions jarg1_, int jarg2, long jarg3, GnListElement jarg3_, boolean jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_resultFilter__SWIG_1(long jarg1, GnVideoOptions jarg1_, int jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_networkInterface(long jarg1, GnVideoOptions jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnVideoOptions_custom(long jarg1, GnVideoOptions jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideoOptions(long jarg1);
  public final static native long new_GnVideo__SWIG_0(long jarg1, GnUser jarg1_, long jarg2, IGnStatusEventsProxyL jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideo__SWIG_1(long jarg1, GnUser jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideo__SWIG_2(long jarg1, GnUser jarg1_, long jarg2, GnLocale jarg2_, long jarg3, IGnStatusEventsProxyL jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long new_GnVideo__SWIG_3(long jarg1, GnUser jarg1_, long jarg2, GnLocale jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnVideo(long jarg1);
  public final static native String GnVideo_version();
  public final static native String GnVideo_buildDate();
  public final static native long GnVideo_options(long jarg1, GnVideo jarg1_);
  public final static native long GnVideo_findProducts__SWIG_0(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findProducts__SWIG_1(long jarg1, GnVideo jarg1_, long jarg2, GnVideoProduct jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findProducts__SWIG_2(long jarg1, GnVideo jarg1_, long jarg2, GnVideoWork jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findProducts__SWIG_3(long jarg1, GnVideo jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findProducts__SWIG_4(long jarg1, GnVideo jarg1_, String jarg2, int jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findProducts__SWIG_5(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_0(long jarg1, GnVideo jarg1_, long jarg2, GnVideoProduct jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_1(long jarg1, GnVideo jarg1_, long jarg2, GnVideoWork jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_2(long jarg1, GnVideo jarg1_, long jarg2, GnContributor jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_3(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeason jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_4(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeries jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_5(long jarg1, GnVideo jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_6(long jarg1, GnVideo jarg1_, String jarg2, int jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findWorks__SWIG_7(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeasons__SWIG_0(long jarg1, GnVideo jarg1_, long jarg2, GnVideoWork jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeasons__SWIG_1(long jarg1, GnVideo jarg1_, long jarg2, GnContributor jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeasons__SWIG_2(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeason jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeasons__SWIG_3(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeries jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeasons__SWIG_4(long jarg1, GnVideo jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeasons__SWIG_5(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_0(long jarg1, GnVideo jarg1_, long jarg2, GnVideoWork jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_1(long jarg1, GnVideo jarg1_, long jarg2, GnContributor jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_2(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeason jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_3(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeries jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_4(long jarg1, GnVideo jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_5(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSeries__SWIG_6(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_0(long jarg1, GnVideo jarg1_, long jarg2, GnVideoWork jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_1(long jarg1, GnVideo jarg1_, long jarg2, GnContributor jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_2(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeason jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_3(long jarg1, GnVideo jarg1_, long jarg2, GnVideoSeries jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_4(long jarg1, GnVideo jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_5(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_6(long jarg1, GnVideo jarg1_, String jarg2, int jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findContributors__SWIG_7(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findObjects__SWIG_0(long jarg1, GnVideo jarg1_, long jarg2, GnDataObject jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findObjects__SWIG_1(long jarg1, GnVideo jarg1_, String jarg2, int jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_findSuggestions(long jarg1, GnVideo jarg1_, String jarg2, int jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnVideo_eventHandler(long jarg1, GnVideo jarg1_);
  public final static native void GnVideo_setCancel(long jarg1, GnVideo jarg1_, boolean jarg2);
  public final static native boolean GnVideo_isCancelled(long jarg1, GnVideo jarg1_);
  public final static native void delete_GnPlaylistCollectionIdentIterator(long jarg1);
  public final static native long GnPlaylistCollectionIdentIterator___ref__(long jarg1, GnPlaylistCollectionIdentIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollectionIdentIterator_next(long jarg1, GnPlaylistCollectionIdentIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnPlaylistCollectionIdentIterator_hasNext(long jarg1, GnPlaylistCollectionIdentIterator jarg1_);
  public final static native long GnPlaylistCollectionIdentIterator_distance(long jarg1, GnPlaylistCollectionIdentIterator jarg1_, long jarg2, GnPlaylistCollectionIdentIterator jarg2_);
  public final static native long new_GnPlaylistCollectionIdentIterator(long jarg1, collection_ident_provider jarg1_, long jarg2);
  public final static native long new_GnPlaylistCollectionIdentIterable(long jarg1, collection_ident_provider jarg1_, long jarg2);
  public final static native long GnPlaylistCollectionIdentIterable_getIterator(long jarg1, GnPlaylistCollectionIdentIterable jarg1_);
  public final static native long GnPlaylistCollectionIdentIterable_end(long jarg1, GnPlaylistCollectionIdentIterable jarg1_);
  public final static native long GnPlaylistCollectionIdentIterable_count(long jarg1, GnPlaylistCollectionIdentIterable jarg1_);
  public final static native long GnPlaylistCollectionIdentIterable_at(long jarg1, GnPlaylistCollectionIdentIterable jarg1_, long jarg2);
  public final static native long GnPlaylistCollectionIdentIterable_getByIndex(long jarg1, GnPlaylistCollectionIdentIterable jarg1_, long jarg2);
  public final static native void delete_GnPlaylistCollectionIdentIterable(long jarg1);
  public final static native void delete_GnPlaylistResultIdentIterator(long jarg1);
  public final static native long GnPlaylistResultIdentIterator___ref__(long jarg1, GnPlaylistResultIdentIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistResultIdentIterator_next(long jarg1, GnPlaylistResultIdentIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnPlaylistResultIdentIterator_hasNext(long jarg1, GnPlaylistResultIdentIterator jarg1_);
  public final static native long GnPlaylistResultIdentIterator_distance(long jarg1, GnPlaylistResultIdentIterator jarg1_, long jarg2, GnPlaylistResultIdentIterator jarg2_);
  public final static native long new_GnPlaylistResultIdentIterator(long jarg1, result_provider jarg1_, long jarg2);
  public final static native long new_GnPlaylistResultIdentIterable(long jarg1, result_provider jarg1_, long jarg2);
  public final static native long GnPlaylistResultIdentIterable_getIterator(long jarg1, GnPlaylistResultIdentIterable jarg1_);
  public final static native long GnPlaylistResultIdentIterable_end(long jarg1, GnPlaylistResultIdentIterable jarg1_);
  public final static native long GnPlaylistResultIdentIterable_count(long jarg1, GnPlaylistResultIdentIterable jarg1_);
  public final static native long GnPlaylistResultIdentIterable_at(long jarg1, GnPlaylistResultIdentIterable jarg1_, long jarg2);
  public final static native long GnPlaylistResultIdentIterable_getByIndex(long jarg1, GnPlaylistResultIdentIterable jarg1_, long jarg2);
  public final static native void delete_GnPlaylistResultIdentIterable(long jarg1);
  public final static native void delete_GnPlaylistJoinIterator(long jarg1);
  public final static native long GnPlaylistJoinIterator___ref__(long jarg1, GnPlaylistJoinIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistJoinIterator_next(long jarg1, GnPlaylistJoinIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnPlaylistJoinIterator_hasNext(long jarg1, GnPlaylistJoinIterator jarg1_);
  public final static native long GnPlaylistJoinIterator_distance(long jarg1, GnPlaylistJoinIterator jarg1_, long jarg2, GnPlaylistJoinIterator jarg2_);
  public final static native long new_GnPlaylistJoinIterator(long jarg1, collection_join_provider jarg1_, long jarg2);
  public final static native long new_GnPlaylistJoinIterable(long jarg1, collection_join_provider jarg1_, long jarg2);
  public final static native long GnPlaylistJoinIterable_getIterator(long jarg1, GnPlaylistJoinIterable jarg1_);
  public final static native long GnPlaylistJoinIterable_end(long jarg1, GnPlaylistJoinIterable jarg1_);
  public final static native long GnPlaylistJoinIterable_count(long jarg1, GnPlaylistJoinIterable jarg1_);
  public final static native long GnPlaylistJoinIterable_at(long jarg1, GnPlaylistJoinIterable jarg1_, long jarg2);
  public final static native long GnPlaylistJoinIterable_getByIndex(long jarg1, GnPlaylistJoinIterable jarg1_, long jarg2);
  public final static native void delete_GnPlaylistJoinIterable(long jarg1);
  public final static native void delete_GnPlaylistStorageIterator(long jarg1);
  public final static native String GnPlaylistStorageIterator___ref__(long jarg1, GnPlaylistStorageIterator jarg1_);
  public final static native String GnPlaylistStorageIterator_next(long jarg1, GnPlaylistStorageIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnPlaylistStorageIterator_hasNext(long jarg1, GnPlaylistStorageIterator jarg1_);
  public final static native long GnPlaylistStorageIterator_distance(long jarg1, GnPlaylistStorageIterator jarg1_, long jarg2, GnPlaylistStorageIterator jarg2_);
  public final static native long new_GnPlaylistStorageIterator__SWIG_0(long jarg1, collection_storage_provider jarg1_, long jarg2);
  public final static native long new_GnPlaylistStorageIterator__SWIG_1(long jarg1, GnPlaylistStorageIterator jarg1_);
  public final static native long new_GnPlaylistStorageIterable(long jarg1, collection_storage_provider jarg1_, long jarg2);
  public final static native long GnPlaylistStorageIterable_getIterator(long jarg1, GnPlaylistStorageIterable jarg1_);
  public final static native long GnPlaylistStorageIterable_end(long jarg1, GnPlaylistStorageIterable jarg1_);
  public final static native long GnPlaylistStorageIterable_count(long jarg1, GnPlaylistStorageIterable jarg1_);
  public final static native long GnPlaylistStorageIterable_at(long jarg1, GnPlaylistStorageIterable jarg1_, long jarg2);
  public final static native long GnPlaylistStorageIterable_getByIndex(long jarg1, GnPlaylistStorageIterable jarg1_, long jarg2);
  public final static native void delete_GnPlaylistStorageIterable(long jarg1);
  public final static native void delete_GnPlaylistAttributeIterator(long jarg1);
  public final static native String GnPlaylistAttributeIterator___ref__(long jarg1, GnPlaylistAttributeIterator jarg1_);
  public final static native String GnPlaylistAttributeIterator_next(long jarg1, GnPlaylistAttributeIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnPlaylistAttributeIterator_hasNext(long jarg1, GnPlaylistAttributeIterator jarg1_);
  public final static native long GnPlaylistAttributeIterator_distance(long jarg1, GnPlaylistAttributeIterator jarg1_, long jarg2, GnPlaylistAttributeIterator jarg2_);
  public final static native long new_GnPlaylistAttributeIterator__SWIG_0(long jarg1, attribute_provider jarg1_, long jarg2);
  public final static native long new_GnPlaylistAttributeIterator__SWIG_1(long jarg1, GnPlaylistAttributeIterator jarg1_);
  public final static native long new_GnPlaylistAttributeIterable(long jarg1, attribute_provider jarg1_, long jarg2);
  public final static native long GnPlaylistAttributeIterable_getIterator(long jarg1, GnPlaylistAttributeIterable jarg1_);
  public final static native long GnPlaylistAttributeIterable_end(long jarg1, GnPlaylistAttributeIterable jarg1_);
  public final static native long GnPlaylistAttributeIterable_count(long jarg1, GnPlaylistAttributeIterable jarg1_);
  public final static native long GnPlaylistAttributeIterable_at(long jarg1, GnPlaylistAttributeIterable jarg1_, long jarg2);
  public final static native long GnPlaylistAttributeIterable_getByIndex(long jarg1, GnPlaylistAttributeIterable jarg1_, long jarg2);
  public final static native void delete_GnPlaylistAttributeIterable(long jarg1);
  public final static native String GnPlaylistIdentifier_mediaIdentifier(long jarg1, GnPlaylistIdentifier jarg1_);
  public final static native String GnPlaylistIdentifier_collectionName(long jarg1, GnPlaylistIdentifier jarg1_);
  public final static native void delete_GnPlaylistIdentifier(long jarg1);
  public final static native long new_GnPlaylistAttributes(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native void delete_GnPlaylistAttributes(long jarg1);
  public final static native String GnPlaylistAttributes_albumName(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_artistName(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_artistType(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_era(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_genre(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_origin(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_mood(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native String GnPlaylistAttributes_tempo(long jarg1, GnPlaylistAttributes jarg1_);
  public final static native long new_result_provider();
  public final static native void delete_result_provider(long jarg1);
  public final static native long result_provider_getData(long jarg1, result_provider jarg1_, long jarg2);
  public final static native long result_provider_count(long jarg1, result_provider jarg1_);
  public final static native long new_collection_ident_provider();
  public final static native long collection_ident_provider_getData(long jarg1, collection_ident_provider jarg1_, long jarg2);
  public final static native long collection_ident_provider_count(long jarg1, collection_ident_provider jarg1_);
  public final static native void delete_collection_ident_provider(long jarg1);
  public final static native long new_collection_join_provider();
  public final static native long collection_join_provider_getData(long jarg1, collection_join_provider jarg1_, long jarg2);
  public final static native long collection_join_provider_count(long jarg1, collection_join_provider jarg1_);
  public final static native void delete_collection_join_provider(long jarg1);
  public final static native long new_collection_storage_provider__SWIG_0();
  public final static native void delete_collection_storage_provider(long jarg1);
  public final static native long new_collection_storage_provider__SWIG_1(long jarg1, collection_storage_provider jarg1_);
  public final static native String collection_storage_provider_getData(long jarg1, collection_storage_provider jarg1_, long jarg2);
  public final static native long collection_storage_provider_count(long jarg1, collection_storage_provider jarg1_);
  public final static native long new_attribute_provider();
  public final static native void delete_attribute_provider(long jarg1);
  public final static native String attribute_provider_getData(long jarg1, attribute_provider jarg1_, long jarg2);
  public final static native long attribute_provider_count(long jarg1, attribute_provider jarg1_);
  public final static native long GnPlaylistResult_identifiers(long jarg1, GnPlaylistResult jarg1_);
  public final static native void delete_GnPlaylistResult(long jarg1);
  public final static native long GnPlaylistMoreLikeThisOptions_maxTracks__SWIG_0(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistMoreLikeThisOptions_maxTracks__SWIG_1(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistMoreLikeThisOptions_maxPerArtist__SWIG_0(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistMoreLikeThisOptions_maxPerArtist__SWIG_1(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistMoreLikeThisOptions_maxPerAlbum__SWIG_0(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistMoreLikeThisOptions_maxPerAlbum__SWIG_1(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistMoreLikeThisOptions_randomSeed__SWIG_0(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistMoreLikeThisOptions_randomSeed__SWIG_1(long jarg1, GnPlaylistMoreLikeThisOptions jarg1_, long jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnPlaylistMoreLikeThisOptions(long jarg1);
  public final static native long new_GnPlaylistCollection__SWIG_0(String jarg1);
  public final static native long new_GnPlaylistCollection__SWIG_1(byte[] jarg1, long jarg2);
  public final static native long new_GnPlaylistCollection__SWIG_2(long jarg1, GnPlaylistCollection jarg1_);
  public final static native String GnPlaylistCollection_name__SWIG_0(long jarg1, GnPlaylistCollection jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_name__SWIG_1(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_add__SWIG_0(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_add__SWIG_1(long jarg1, GnPlaylistCollection jarg1_, String jarg2, long jarg3, GnAlbum jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_add__SWIG_2(long jarg1, GnPlaylistCollection jarg1_, String jarg2, long jarg3, GnTrack jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_add__SWIG_3(long jarg1, GnPlaylistCollection jarg1_, String jarg2, long jarg3, GnContributor jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_add__SWIG_4(long jarg1, GnPlaylistCollection jarg1_, String jarg2, long jarg3, GnPlaylistAttributes jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_add__SWIG_5(long jarg1, GnPlaylistCollection jarg1_, String jarg2, long jarg3, GnListElement jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_remove(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnPlaylistCollection_contains(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_find(long jarg1, GnPlaylistCollection jarg1_, String jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_attributes__SWIG_0(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnUser jarg2_, long jarg3, GnPlaylistIdentifier jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_attributes__SWIG_1(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnUser jarg2_, String jarg3, String jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_statementValidate(long jarg1, GnPlaylistCollection jarg1_, String jarg2);
  public final static native boolean GnPlaylistCollection_statementRequiresSeed(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_statementAnalyzeIdent(long jarg1, GnPlaylistCollection jarg1_, String jarg2, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_generatePlaylist__SWIG_0(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnUser jarg2_, String jarg3, long jarg4, GnDataObject jarg4_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_generatePlaylist__SWIG_1(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnUser jarg2_, String jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_generateMoreLikeThis(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnUser jarg2_, long jarg3, GnDataObject jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_attributesSupported(long jarg1, GnPlaylistCollection jarg1_);
  public final static native long GnPlaylistCollection_mediaIdentifiers(long jarg1, GnPlaylistCollection jarg1_);
  public final static native long GnPlaylistCollection_joins(long jarg1, GnPlaylistCollection jarg1_);
  public final static native long GnPlaylistCollection_joinFindByName(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_join(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnPlaylistCollection jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_joinRemove(long jarg1, GnPlaylistCollection jarg1_, long jarg2, GnPlaylistCollection jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_serialize(long jarg1, GnPlaylistCollection jarg1_, byte[] jarg2, long jarg3) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_serializeSize(long jarg1, GnPlaylistCollection jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_syncProcessAdd(long jarg1, GnPlaylistCollection jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistCollection_syncProcessExecute(long jarg1, GnPlaylistCollection jarg1_, long jarg2, IGnPlaylistCollectionSyncEventsProxyL jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistCollection_moreLikeThisOptions(long jarg1, GnPlaylistCollection jarg1_);
  public final static native void delete_GnPlaylistCollection(long jarg1);
  public final static native void delete_IGnPlaylistCollectionSyncEventsProxyL(long jarg1);
  public final static native void IGnPlaylistCollectionSyncEventsProxyL_onUpdate(long jarg1, IGnPlaylistCollectionSyncEventsProxyL jarg1_, long jarg2, GnPlaylistCollection jarg2_, long jarg3, GnPlaylistIdentifier jarg3_, int jarg4, long jarg5, IGnCancellableProxy jarg5_);
  public final static native long new_IGnPlaylistCollectionSyncEventsProxyL();
  public final static native void IGnPlaylistCollectionSyncEventsProxyL_director_connect(IGnPlaylistCollectionSyncEventsProxyL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IGnPlaylistCollectionSyncEventsProxyL_change_ownership(IGnPlaylistCollectionSyncEventsProxyL obj, long cptr, boolean take_or_release);
  public final static native long new_GnPlaylistStorage();
  public final static native void delete_GnPlaylistStorage(long jarg1);
  public final static native long GnPlaylistStorage_isValid(long jarg1, GnPlaylistStorage jarg1_);
  public final static native void GnPlaylistStorage_compact(long jarg1, GnPlaylistStorage jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistStorage_store(long jarg1, GnPlaylistStorage jarg1_, long jarg2, GnPlaylistCollection jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistStorage_load__SWIG_0(long jarg1, GnPlaylistStorage jarg1_, long jarg2, GnPlaylistStorageIterator jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistStorage_load__SWIG_1(long jarg1, GnPlaylistStorage jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistStorage_remove__SWIG_0(long jarg1, GnPlaylistStorage jarg1_, long jarg2, GnPlaylistCollection jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistStorage_remove__SWIG_1(long jarg1, GnPlaylistStorage jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnPlaylistStorage_location(long jarg1, GnPlaylistStorage jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native long GnPlaylistStorage_names(long jarg1, GnPlaylistStorage jarg1_);
  public final static native long new_GnPlaylist() throws com.gracenote.gnsdk.GnException;
  public final static native String GnPlaylist_version();
  public final static native String GnPlaylist_buildDate();
  public final static native long GnPlaylist_attributesSupported(long jarg1, GnPlaylist jarg1_);
  public final static native void delete_GnPlaylist(long jarg1);
  public final static native void delete_GnMoodgridResultIterator(long jarg1);
  public final static native long GnMoodgridResultIterator___ref__(long jarg1, GnMoodgridResultIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgridResultIterator_next(long jarg1, GnMoodgridResultIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMoodgridResultIterator_hasNext(long jarg1, GnMoodgridResultIterator jarg1_);
  public final static native long GnMoodgridResultIterator_distance(long jarg1, GnMoodgridResultIterator jarg1_, long jarg2, GnMoodgridResultIterator jarg2_);
  public final static native long new_GnMoodgridResultIterator(long jarg1, moodgrid_result_provider jarg1_, long jarg2);
  public final static native long new_GnMoodgridResultIterable(long jarg1, moodgrid_result_provider jarg1_, long jarg2);
  public final static native long GnMoodgridResultIterable_getIterator(long jarg1, GnMoodgridResultIterable jarg1_);
  public final static native long GnMoodgridResultIterable_end(long jarg1, GnMoodgridResultIterable jarg1_);
  public final static native long GnMoodgridResultIterable_count(long jarg1, GnMoodgridResultIterable jarg1_);
  public final static native long GnMoodgridResultIterable_at(long jarg1, GnMoodgridResultIterable jarg1_, long jarg2);
  public final static native long GnMoodgridResultIterable_getByIndex(long jarg1, GnMoodgridResultIterable jarg1_, long jarg2);
  public final static native void delete_GnMoodgridResultIterable(long jarg1);
  public final static native void delete_GnMoodgridPresentationDataIterator(long jarg1);
  public final static native long GnMoodgridPresentationDataIterator___ref__(long jarg1, GnMoodgridPresentationDataIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgridPresentationDataIterator_next(long jarg1, GnMoodgridPresentationDataIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMoodgridPresentationDataIterator_hasNext(long jarg1, GnMoodgridPresentationDataIterator jarg1_);
  public final static native long GnMoodgridPresentationDataIterator_distance(long jarg1, GnMoodgridPresentationDataIterator jarg1_, long jarg2, GnMoodgridPresentationDataIterator jarg2_);
  public final static native long new_GnMoodgridPresentationDataIterator(long jarg1, presentation_data_provider jarg1_, long jarg2);
  public final static native long new_GnMoodgridPresentationDataIterable(long jarg1, presentation_data_provider jarg1_, long jarg2);
  public final static native long GnMoodgridPresentationDataIterable_getIterator(long jarg1, GnMoodgridPresentationDataIterable jarg1_);
  public final static native long GnMoodgridPresentationDataIterable_end(long jarg1, GnMoodgridPresentationDataIterable jarg1_);
  public final static native long GnMoodgridPresentationDataIterable_count(long jarg1, GnMoodgridPresentationDataIterable jarg1_);
  public final static native long GnMoodgridPresentationDataIterable_at(long jarg1, GnMoodgridPresentationDataIterable jarg1_, long jarg2);
  public final static native long GnMoodgridPresentationDataIterable_getByIndex(long jarg1, GnMoodgridPresentationDataIterable jarg1_, long jarg2);
  public final static native void delete_GnMoodgridPresentationDataIterable(long jarg1);
  public final static native long new_GnMoodgridProviderIterable(long jarg1, moodgrid_provider jarg1_, long jarg2);
  public final static native long GnMoodgridProviderIterable_getIterator(long jarg1, GnMoodgridProviderIterable jarg1_);
  public final static native long GnMoodgridProviderIterable_end(long jarg1, GnMoodgridProviderIterable jarg1_);
  public final static native long GnMoodgridProviderIterable_count(long jarg1, GnMoodgridProviderIterable jarg1_);
  public final static native long GnMoodgridProviderIterable_at(long jarg1, GnMoodgridProviderIterable jarg1_, long jarg2);
  public final static native long GnMoodgridProviderIterable_getByIndex(long jarg1, GnMoodgridProviderIterable jarg1_, long jarg2);
  public final static native void delete_GnMoodgridProviderIterable(long jarg1);
  public final static native void delete_GnMoodgridProviderIterator(long jarg1);
  public final static native long GnMoodgridProviderIterator___ref__(long jarg1, GnMoodgridProviderIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgridProviderIterator_next(long jarg1, GnMoodgridProviderIterator jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMoodgridProviderIterator_hasNext(long jarg1, GnMoodgridProviderIterator jarg1_);
  public final static native long GnMoodgridProviderIterator_distance(long jarg1, GnMoodgridProviderIterator jarg1_, long jarg2, GnMoodgridProviderIterator jarg2_);
  public final static native long new_GnMoodgridProviderIterator(long jarg1, moodgrid_provider jarg1_, long jarg2);
  public final static native long new_GnMoodgridDataPoint__SWIG_0();
  public final static native long new_GnMoodgridDataPoint__SWIG_1(long jarg1, long jarg2);
  public final static native void GnMoodgridDataPoint_X_set(long jarg1, GnMoodgridDataPoint jarg1_, long jarg2);
  public final static native long GnMoodgridDataPoint_X_get(long jarg1, GnMoodgridDataPoint jarg1_);
  public final static native void GnMoodgridDataPoint_Y_set(long jarg1, GnMoodgridDataPoint jarg1_, long jarg2);
  public final static native long GnMoodgridDataPoint_Y_get(long jarg1, GnMoodgridDataPoint jarg1_);
  public final static native void delete_GnMoodgridDataPoint(long jarg1);
  public final static native void delete_GnMoodgridIdentifier(long jarg1);
  public final static native String GnMoodgridIdentifier_mediaIdentifier(long jarg1, GnMoodgridIdentifier jarg1_);
  public final static native String GnMoodgridIdentifier_group(long jarg1, GnMoodgridIdentifier jarg1_);
  public final static native void delete_moodgrid_result_provider(long jarg1);
  public final static native long moodgrid_result_provider_getData(long jarg1, moodgrid_result_provider jarg1_, long jarg2);
  public final static native long moodgrid_result_provider_count(long jarg1, moodgrid_result_provider jarg1_);
  public final static native long GnMoodgridResult_count(long jarg1, GnMoodgridResult jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgridResult_identifiers(long jarg1, GnMoodgridResult jarg1_);
  public final static native void delete_GnMoodgridResult(long jarg1);
  public final static native String GnMoodgridProvider_name(long jarg1, GnMoodgridProvider jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMoodgridProvider_type(long jarg1, GnMoodgridProvider jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native boolean GnMoodgridProvider_requiresNetwork(long jarg1, GnMoodgridProvider jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMoodgridProvider(long jarg1);
  public final static native long moodgrid_provider_getData(long jarg1, moodgrid_provider jarg1_, long jarg2);
  public final static native long moodgrid_provider_count(long jarg1, moodgrid_provider jarg1_);
  public final static native long new_moodgrid_provider();
  public final static native void delete_moodgrid_provider(long jarg1);
  public final static native long new_presentation_data_provider__SWIG_0();
  public final static native long new_presentation_data_provider__SWIG_1(int jarg1);
  public final static native long presentation_data_provider_getData(long jarg1, presentation_data_provider jarg1_, long jarg2);
  public final static native long presentation_data_provider_count(long jarg1, presentation_data_provider jarg1_);
  public final static native void delete_presentation_data_provider(long jarg1);
  public final static native long GnMoodgridPresentation_moods(long jarg1, GnMoodgridPresentation jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native int GnMoodgridPresentation_layoutType(long jarg1, GnMoodgridPresentation jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native int GnMoodgridPresentation_coordinateType(long jarg1, GnMoodgridPresentation jarg1_);
  public final static native void GnMoodgridPresentation_addFilter(long jarg1, GnMoodgridPresentation jarg1_, String jarg2, int jarg3, String jarg4, int jarg5) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMoodgridPresentation_removeFilter(long jarg1, GnMoodgridPresentation jarg1_, String jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void GnMoodgridPresentation_removeAllFilters(long jarg1, GnMoodgridPresentation jarg1_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMoodgridPresentation_moodName(long jarg1, GnMoodgridPresentation jarg1_, long jarg2, GnMoodgridDataPoint jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native String GnMoodgridPresentation_moodId(long jarg1, GnMoodgridPresentation jarg1_, long jarg2, GnMoodgridDataPoint jarg2_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgridPresentation_findRecommendations(long jarg1, GnMoodgridPresentation jarg1_, long jarg2, GnMoodgridProvider jarg2_, long jarg3, GnMoodgridDataPoint jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgridPresentation_findRecommendationsEstimate(long jarg1, GnMoodgridPresentation jarg1_, long jarg2, GnMoodgridProvider jarg2_, long jarg3, GnMoodgridDataPoint jarg3_) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMoodgridPresentation(long jarg1);
  public final static native long new_GnMoodgrid();
  public final static native String GnMoodgrid_version();
  public final static native String GnMoodgrid_buildDate();
  public final static native long GnMoodgrid_providers(long jarg1, GnMoodgrid jarg1_);
  public final static native long GnMoodgrid_createPresentation(long jarg1, GnMoodgrid jarg1_, long jarg2, GnUser jarg2_, int jarg3, int jarg4) throws com.gracenote.gnsdk.GnException;
  public final static native long GnMoodgrid_dimensions(long jarg1, GnMoodgrid jarg1_, int jarg2) throws com.gracenote.gnsdk.GnException;
  public final static native void delete_GnMoodgrid(long jarg1);
  public final static native long GnString_SWIGUpcast(long jarg1);
  public final static native long GnUser_SWIGUpcast(long jarg1);
  public final static native long GnDataObject_SWIGUpcast(long jarg1);
  public final static native long GnAsset_SWIGUpcast(long jarg1);
  public final static native long GnContent_SWIGUpcast(long jarg1);
  public final static native long GnExternalId_SWIGUpcast(long jarg1);
  public final static native long GnRole_SWIGUpcast(long jarg1);
  public final static native long GnName_SWIGUpcast(long jarg1);
  public final static native long GnTitle_SWIGUpcast(long jarg1);
  public final static native long GnContributor_SWIGUpcast(long jarg1);
  public final static native long GnCredit_SWIGUpcast(long jarg1);
  public final static native long GnAudioWork_SWIGUpcast(long jarg1);
  public final static native long GnArtist_SWIGUpcast(long jarg1);
  public final static native long GnTrack_SWIGUpcast(long jarg1);
  public final static native long GnResponseTracks_SWIGUpcast(long jarg1);
  public final static native long GnAlbum_SWIGUpcast(long jarg1);
  public final static native long GnResponseAlbums_SWIGUpcast(long jarg1);
  public final static native long GnDataMatch_SWIGUpcast(long jarg1);
  public final static native long GnResponseDataMatches_SWIGUpcast(long jarg1);
  public final static native long GnListElement_SWIGUpcast(long jarg1);
  public final static native long GnList_SWIGUpcast(long jarg1);
  public final static native long GnLocaleInfo_SWIGUpcast(long jarg1);
  public final static native long GnLocale_SWIGUpcast(long jarg1);
  public final static native long GnMusicId_SWIGUpcast(long jarg1);
  public final static native long GnMusicIdFileInfo_SWIGUpcast(long jarg1);
  public final static native long GnMusicIdFile_SWIGUpcast(long jarg1);
  public final static native long IGnMusicIdFileEventsProxyL_SWIGUpcast(long jarg1);
  public final static native long GnMusicIdStream_SWIGUpcast(long jarg1);
  public final static native long IGnMusicIdStreamEventsProxyL_SWIGUpcast(long jarg1);
  public final static native long GnLink_SWIGUpcast(long jarg1);
  public final static native long GnLinkContent_SWIGUpcast(long jarg1);
  public final static native long GnLookupLocalStreamIngest_SWIGUpcast(long jarg1);
  public final static native long GnDspFeature_SWIGUpcast(long jarg1);
  public final static native long GnDsp_SWIGUpcast(long jarg1);
  public final static native long GnRating_SWIGUpcast(long jarg1);
  public final static native long GnVideoCredit_SWIGUpcast(long jarg1);
  public final static native long GnVideoChapter_SWIGUpcast(long jarg1);
  public final static native long GnVideoSeason_SWIGUpcast(long jarg1);
  public final static native long GnVideoSeries_SWIGUpcast(long jarg1);
  public final static native long GnVideoWork_SWIGUpcast(long jarg1);
  public final static native long GnVideoFeature_SWIGUpcast(long jarg1);
  public final static native long GnVideoLayer_SWIGUpcast(long jarg1);
  public final static native long GnVideoSide_SWIGUpcast(long jarg1);
  public final static native long GnVideoDisc_SWIGUpcast(long jarg1);
  public final static native long GnVideoProduct_SWIGUpcast(long jarg1);
  public final static native long GnResponseVideoSuggestions_SWIGUpcast(long jarg1);
  public final static native long GnResponseVideoObjects_SWIGUpcast(long jarg1);
  public final static native long GnResponseContributors_SWIGUpcast(long jarg1);
  public final static native long GnResponseVideoSeries_SWIGUpcast(long jarg1);
  public final static native long GnResponseVideoSeasons_SWIGUpcast(long jarg1);
  public final static native long GnResponseVideoWork_SWIGUpcast(long jarg1);
  public final static native long GnResponseVideoProduct_SWIGUpcast(long jarg1);
  public final static native long GnVideo_SWIGUpcast(long jarg1);
  public final static native long GnPlaylistAttributes_SWIGUpcast(long jarg1);
  public final static native long GnPlaylistResult_SWIGUpcast(long jarg1);
  public final static native long GnPlaylistCollection_SWIGUpcast(long jarg1);
  public final static native long GnPlaylistStorage_SWIGUpcast(long jarg1);
  public final static native long GnMoodgridResult_SWIGUpcast(long jarg1);
  public final static native long GnMoodgridProvider_SWIGUpcast(long jarg1);
  public final static native long GnMoodgridPresentation_SWIGUpcast(long jarg1);
  public final static native long GnMoodgrid_SWIGUpcast(long jarg1);

  public static long SwigDirector_IGnUserStoreProxyL_LoadSerializedUser(IGnUserStoreProxyL self, String clientId) {
    return GnString.getCPtr(self.LoadSerializedUser(clientId));
  }
  public static boolean SwigDirector_IGnUserStoreProxyL_StoreSerializedUser(IGnUserStoreProxyL self, String clientId, String userData) {
    return self.StoreSerializedUser(clientId, userData);
  }
  public static void SwigDirector_IGnStatusEventsProxyL_statusEvent(IGnStatusEventsProxyL self, int status, long percentComplete, long bytesTotalSent, long bytesTotalReceived, long canceller) {
    self.statusEvent(GnStatus.swigToEnum(status), percentComplete, bytesTotalSent, bytesTotalReceived, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnSystemEventsProxyL_localeUpdateNeeded(IGnSystemEventsProxyL self, long locale) {
    self.localeUpdateNeeded(new GnLocale(locale, true));
  }
  public static void SwigDirector_IGnSystemEventsProxyL_listUpdateNeeded(IGnSystemEventsProxyL self, long list) {
    self.listUpdateNeeded(new GnList(list, true));
  }
  public static void SwigDirector_IGnSystemEventsProxyL_systemMemoryWarning(IGnSystemEventsProxyL self, long curMemSize, long memoryWarnSize) {
    self.systemMemoryWarning(curMemSize, memoryWarnSize);
  }
  public static boolean SwigDirector_IGnLogEventsProxyL_logMessage(IGnLogEventsProxyL self, int packageId, int messageType, long errorCode, String message) {
    return self.logMessage(packageId, GnLogMessageType.swigToEnum(messageType), errorCode, message);
  }
  public static long SwigDirector_IGnAudioSourceProxyL_sourceInit(IGnAudioSourceProxyL self) {
    return self.sourceInit();
  }
  public static void SwigDirector_IGnAudioSourceProxyL_sourceClose(IGnAudioSourceProxyL self) {
    self.sourceClose();
  }
  public static long SwigDirector_IGnAudioSourceProxyL_samplesPerSecond(IGnAudioSourceProxyL self) {
    return self.samplesPerSecond();
  }
  public static long SwigDirector_IGnAudioSourceProxyL_sampleSizeInBits(IGnAudioSourceProxyL self) {
    return self.sampleSizeInBits();
  }
  public static long SwigDirector_IGnAudioSourceProxyL_numberOfChannels(IGnAudioSourceProxyL self) {
    return self.numberOfChannels();
  }
  public static long SwigDirector_IGnAudioSourceProxyL_getData(IGnAudioSourceProxyL self, java.nio.ByteBuffer dataBuffer, long dataSize) {
    return self.getData(dataBuffer, dataSize);
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_statusEvent(IGnMusicIdFileEventsProxyL self, int status, long percentComplete, long bytesTotalSent, long bytesTotalReceived, long canceller) {
    self.statusEvent(GnStatus.swigToEnum(status), percentComplete, bytesTotalSent, bytesTotalReceived, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_musicIdFileStatusEvent(IGnMusicIdFileEventsProxyL self, long fileInfo, int status, long currentFile, long totalFiles, long canceller) {
    self.musicIdFileStatusEvent(new GnMusicIdFileInfo(fileInfo, true), GnMusicIdFileCallbackStatus.swigToEnum(status), currentFile, totalFiles, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_gatherFingerprint(IGnMusicIdFileEventsProxyL self, long fileInfo, long currentFile, long totalFiles, long canceller) {
    self.gatherFingerprint(new GnMusicIdFileInfo(fileInfo, true), currentFile, totalFiles, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_gatherMetadata(IGnMusicIdFileEventsProxyL self, long fileInfo, long currentFile, long totalFiles, long canceller) {
    self.gatherMetadata(new GnMusicIdFileInfo(fileInfo, true), currentFile, totalFiles, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_musicIdFileAlbumResult(IGnMusicIdFileEventsProxyL self, long albumResult, long currentAlbum, long totalAlbums, long canceller) {
    self.musicIdFileAlbumResult(new GnResponseAlbums(albumResult, true), currentAlbum, totalAlbums, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_musicIdFileMatchResult(IGnMusicIdFileEventsProxyL self, long matchesResult, long currentAlbum, long totalAlbums, long canceller) {
    self.musicIdFileMatchResult(new GnResponseDataMatches(matchesResult, true), currentAlbum, totalAlbums, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_musicIdFileResultNotFound(IGnMusicIdFileEventsProxyL self, long fileInfo, long currentFile, long totalFiles, long canceller) {
    self.musicIdFileResultNotFound(new GnMusicIdFileInfo(fileInfo, true), currentFile, totalFiles, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileEventsProxyL_musicIdFileComplete(IGnMusicIdFileEventsProxyL self, long completeError) {
    self.musicIdFileComplete(new GnError(completeError, true));
  }
  public static void SwigDirector_IGnMusicIdFileInfoEventsProxyL_gatherFingerprint(IGnMusicIdFileInfoEventsProxyL self, long fileinfo, long currentFile, long totalFiles, long canceller) {
    self.gatherFingerprint(new GnMusicIdFileInfo(fileinfo, true), currentFile, totalFiles, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdFileInfoEventsProxyL_gatherMetadata(IGnMusicIdFileInfoEventsProxyL self, long fileinfo, long currentFile, long totalFiles, long canceller) {
    self.gatherMetadata(new GnMusicIdFileInfo(fileinfo, true), currentFile, totalFiles, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdStreamEventsProxyL_statusEvent(IGnMusicIdStreamEventsProxyL self, int status, long percentComplete, long bytesTotalSent, long bytesTotalReceived, long canceller) {
    self.statusEvent(GnStatus.swigToEnum(status), percentComplete, bytesTotalSent, bytesTotalReceived, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdStreamEventsProxyL_musicIdStreamProcessingStatusEvent(IGnMusicIdStreamEventsProxyL self, int status, long canceller) {
    self.musicIdStreamProcessingStatusEvent(GnMusicIdStreamProcessingStatus.swigToEnum(status), new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdStreamEventsProxyL_musicIdStreamIdentifyingStatusEvent(IGnMusicIdStreamEventsProxyL self, int status, long canceller) {
    self.musicIdStreamIdentifyingStatusEvent(GnMusicIdStreamIdentifyingStatus.swigToEnum(status), new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdStreamEventsProxyL_musicIdStreamAlbumResult(IGnMusicIdStreamEventsProxyL self, long result, long canceller) {
    self.musicIdStreamAlbumResult(new GnResponseAlbums(result, true), new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnMusicIdStreamEventsProxyL_musicIdStreamIdentifyCompletedWithError(IGnMusicIdStreamEventsProxyL self, long completeError) {
    self.musicIdStreamIdentifyCompletedWithError(new GnError(completeError, true));
  }
  public static void SwigDirector_IGnLookupLocalStreamIngestEventsProxyL_statusEvent(IGnLookupLocalStreamIngestEventsProxyL self, int status, String bundleId, long canceller) {
    self.statusEvent(GnLookupLocalStreamIngestStatus.swigToEnum(status), bundleId, new IGnCancellableProxy(canceller, false));
  }
  public static void SwigDirector_IGnPlaylistCollectionSyncEventsProxyL_onUpdate(IGnPlaylistCollectionSyncEventsProxyL self, long collection, long identifier, int status, long canceller) {
    self.onUpdate(new GnPlaylistCollection(collection, false), new GnPlaylistIdentifier(identifier, false), GnPlaylistEventsIdentiferStatus.swigToEnum(status), new IGnCancellableProxy(canceller, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
