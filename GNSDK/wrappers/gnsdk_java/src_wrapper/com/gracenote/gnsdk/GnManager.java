/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class GnManager {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected GnManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_GnManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

	private IGnSystemEvents systemEvents;
	private IGnSystemEventsProxyU systemEventsProxy;
    private long getNewSystemEventsCPtr(IGnSystemEvents systemEvents) {
    	this.systemEvents = systemEvents;
    	systemEventsProxy = new IGnSystemEventsProxyU(systemEvents);
    	return IGnSystemEventsProxyL.getCPtr(systemEventsProxy);
    }

  public static String version() {
    return gnsdk_javaJNI.GnManager_version();
  }

  public static String productVersion() {
    return gnsdk_javaJNI.GnManager_productVersion();
  }

  public static String buildDate() {
    return gnsdk_javaJNI.GnManager_buildDate();
  }

  public static String globalIdMagic() {
    return gnsdk_javaJNI.GnManager_globalIdMagic();
  }

  public GnString userRegister(GnUserRegisterMode registerMode, String clientId, String clientTag, String applicationVersion) throws com.gracenote.gnsdk.GnException {
    return new GnString(gnsdk_javaJNI.GnManager_userRegister(swigCPtr, this, registerMode.swigValue(), clientId, clientTag, applicationVersion), true);
  }

  public GnStoreOps queryCacheStore() {
    return new GnStoreOps(gnsdk_javaJNI.GnManager_queryCacheStore(swigCPtr, this), false);
  }

  public GnStoreOps contentCacheStore() {
    return new GnStoreOps(gnsdk_javaJNI.GnManager_contentCacheStore(swigCPtr, this), false);
  }

  public GnStoreOps localesStore() {
    return new GnStoreOps(gnsdk_javaJNI.GnManager_localesStore(swigCPtr, this), false);
  }

  public void systemEventHandler(IGnSystemEvents pEventHandler) {
    gnsdk_javaJNI.GnManager_systemEventHandler(swigCPtr, this, getNewSystemEventsCPtr(pEventHandler), systemEventsProxy);
  }

  public void systemMemoryEvent(long memoryWarnSize) {
    gnsdk_javaJNI.GnManager_systemMemoryEvent(swigCPtr, this, memoryWarnSize);
  }

  public long systemMemoryCurrent() {
    return gnsdk_javaJNI.GnManager_systemMemoryCurrent(swigCPtr, this);
  }

  public long systemMemoryHighWater(char bResetHighWater) {
    return gnsdk_javaJNI.GnManager_systemMemoryHighWater(swigCPtr, this, bResetHighWater);
  }

  public void testGracenoteConnection(GnUser user) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnManager_testGracenoteConnection(swigCPtr, this, GnUser.getCPtr(user), user);
  }

  public IGnSystemEvents eventHandler() {
	return systemEvents;
}

  public GnManager(String gnsdkLibraryPath, String license, GnLicenseInputMode licenseInputMode) throws com.gracenote.gnsdk.GnException {
    this(gnsdk_javaJNI.new_GnManager(gnsdkLibraryPath, license, licenseInputMode.swigValue()), true);
  }

}
