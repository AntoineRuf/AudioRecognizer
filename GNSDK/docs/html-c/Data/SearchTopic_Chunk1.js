define({"69":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Recognizing Video Products with VideoID.html",a:"GNSDK provides two modules for implementing video features: VideoID and VideoExplore: VideoID supports recognizing Products and enables access to related metadata such as title, genre, rating, synopsis, cast and crew. A Product refers to the commercial release of a Film, TV Series, or video content. ...",t:"Recognizing Video Products with VideoID"},"70":{i:0.00770464209652417,u:"../Content/c-topics/recognition/video/Find Video Products by TOC.html",a:"Below is sample code showing a find query using a Product\u0027s TOC. /* Create query handle */\ngnsdk_video_query_create(user_handle, GNSDK_NULL, GNSDK_NULL, \u0026query_handle);\n\n/* Set the input ID */\ngnsdk_video_query_set_toc_string( query_handle,\n\"1:15;2:198 15;3:830 7241 6099 3596 9790 3605 2905 2060 ...",t:"Find Video Products by TOC"},"71":{i:0.00540674440312433,u:"../Content/c-topics/recognition/music/Using the MusicID-File APIs.html",a:"In general, your application should take the following steps when using one of the MusicID-File methods for identification - TrackID, AlbumID or LibraryID: TrackID and AlbumID Initialize the GNSDK and the MusicID-File and DSP (for fingerprinting) modules Create a MusicID-File query handle Create a ...",t:"Using the MusicID-File APIs"},"72":{i:0.00540674440312433,u:"../Content/c-topics/recognition/music/Performing Advanced Music Identification.html",a:"MusicID-File provides three processing methods enabling advanced file-based media recognition. Each method utilizes the same population and result management APIs, so which method to use is determined by the application\u0027s requirement at the time of processing. MusicID-File returns a GDO Gracenote ...",t:"Performing Advanced Music Identification"},"73":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/VideoExplore Find Queries.html",a:"This section lists commonly-used Video APIs. Refer to the GNSDK API Reference for a complete list of Video APIs and their usage. The most commonly used APIs  are the gnsdk_video_query_find_*() APIs used to access AV Works, Contributors, Series, Seasons, Programs, and Suggestions metadata: ...",t:"VideoExplore Find Queries"},"74":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/GDO Inputs for Video Find Queries.html",a:"This topic lists the valid Partial and Full GDO A GDO that contains all the information associated with the query match. See Partial GDO. inputs for gnsdk_video_query_find*().  Valid Partial GDO A GDO that contains a subset of information for the query match, but enough to perform additional ...",t:"GDO Inputs for Video Find Queries"},"75":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Accessing Video GDOs from other.html",a:"The following table shows a subset of the data model for video GDOs and which GDOs can access other GDOs. For a complete list of GDOs and their relationships, see the Data Model in the GNSDK for Desktop C API Reference . Input GDOs GDOs Accessible from Input GDOs Products AV Works AV Works ...",t:"Accessing Video GDOs from other Video GDOs"},"76":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Find Works.html",a:"This example demonstrates using VideoExplore to perform a Works query (gnsdk_video_query_find_works()). While this example focuses on finding Works using a contributor name (Harrison Ford), the basic query steps are similar for most GNSDK lookups. A Work refers to the artistic creation and ...",t:"Find Works"},"77":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Find Seasons.html",a:"This example demonstrates using VideoExplore to perform a Seasons query (gnsdk_video_query_find_seasons()). While this example focuses on looking up a video Season using a TUI and TUI tag, the basic query steps are similar for most GNSDK lookups. A Season is an ordered collection of Works, typically ...",t:"Find Seasons"},"78":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Find Series.html",a:"This example demonstrates using VideoExplore to perform a basic Series query (gnsdk_video_query_find_series()). While this example focuses on looking up a Video Series using a TUI and TUI tag, the basic query steps are similar for most GNSDK lookups. A Series is a collection of related Works, ...",t:"Find Series"},"79":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Find Contributors.html",a:"This example demonstrates using VideoExplore to perform a Contributors query (gnsdk_video_query_find_contributors()). While this example looks up a video work using a deserialized GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain ...",t:"Find Contributors"},"80":{i:0.00540674440312433,u:"../Content/c-topics/recognition/video/Find Suggestions.html",a:"This example demonstrates using VideoExplore to perform a Suggestions query (gnsdk_video_query_find_suggestions()). While this example searches for Products based on title, the basic query steps are similar for most GNSDK lookups. Possible items your application can search on include Character name, ...",t:"Find Suggestions"},"81":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/music/Navigating Music GDOs.html",a:"Top-level music GDOs generally represent Albums and Tracks. An album or track query can return a response GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed ...",t:"Navigating Music GDOs"},"82":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/music/Accessing Mood and Tempo Metadata.html",a:"In GNSDK for Desktop , access sonic attribute metadata from Gracenote Service by setting the GNSDK_MUSICID_OPTION_ENABLE_SONIC_DATA option to True when performing MusicID Album queries. Setting this option causes the mood and tempo metadata contained in a GDO Gracenote Data Object: Containers ...",t:"Accessing Mood and Tempo Metadata"},"83":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/music/Accessing Classical Music Metadata.html",a:"To retrieve classical music metadata, set a query handle with the applicable query option set to True to access the metadata and automatically render it to the XML output. Your application must be licensed to access this metadata. Contact Gracenote Global Services \u0026 Support for more information. For ...",t:"Accessing Classical Music Metadata"},"84":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/music/Accessing External IDs.html",a:"GNSDK for Desktop can match identified media with External IDs (XIDs). These are third-party identifiers provided by preferred Gracenote partners that allow applications to match identified media to merchandise IDs in online stores and other services – facilitating transactions by helping connect ...",t:"Accessing External IDs "},"85":{i:0.0109033319429466,u:"../Content/c-topics/accessing_metadata/music/Accessing Collaborative Artists Metadata.html",a:"Some songs are collaborations between two or more artists. For example, the Santana album “Supernatural” contains a number of collaborations, including: “Santana featuring Rob Thomas” “Santana featuring Dave Matthews” You might want to take different actions in your application, depending on whether ...",t:"Accessing Collaborative Artists Metadata"},"86":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/music/Music Metadata Reference Overview.html",a:"The following metadata reference examples are intended to give the reader some idea of what is returned from MusicID Query APIs. Note that they do not contain every possible field that could be returned. For a complete reference, consult the GNSDK for Desktop Data Model. ",t:"Music Metadata Reference Overview"},"87":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/music/Album Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in an album GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed by an ...",t:"Album Metadata Example"},"88":{i:0.00770464209652417,u:"../Content/c-topics/accessing_metadata/music/Classical Album Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed by an application ...",t:"Classical Album Metadata Example"},"89":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Implementing Text Filters.html",a:"GNSDK for Desktop Video gives your application the ability to filter results based on a number of keys (e.g., genre, production type, etc.) and values (e.g., comedies, drama, documentaries, etc.). Note that the system disregards filters when performing non-text related video queries, and that list ...",t:"Implementing Text Filters"},"90":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Accessing Locale-Dependent Data.html",a:"The GNSDK for Desktop provides locales as a convenient way to group metadata specific to a region (e.g., Europe) and language (e.g., French) that should be returned from the Gracenote service. What defines a locale is a group (such as Video), a language, a region and a descriptor (indicating level ...",t:"Accessing Locale-Dependent Data"},"91":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Accessing AV Work Credits and Filmography.html",a:"Video Explore helps you expand application capabilities with support for searching among Contributors, Products, Seasons, Series, and Works. It facilitates user exploration and discovery with related queries such as: Who are the cast and crew? What other films did this actor play in? Sample Code: ...",t:"Accessing AV Work Credits and Filmography"},"92":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Accessing Video Product Metadata.html",a:"This example demonstrates accessing and parsing metadata from a video Product: Disc \u003e Side \u003e Layer \u003e Feature \u003e Chapter (see sample output below). A Product refers to the commercial release of a Film, TV Series, or video content. Products contain a unique commercial code such as a UPC, Hinban, or ...",t:"Accessing Video Product Metadata"},"93":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Video Metadata Reference Overview.html",a:"Video Metadata Reference Overview The following metadata references are intended to give the reader some idea of what is returned from Video Query APIs. They were generated using the sample applications in the \"Commonly Used Video Query APIs\" section. ",t:"Video Metadata Reference Overview"},"94":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Contributor Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a gnsdk_video_query_find_contributors() API call. The output was generated using the sample code in the \"Find Contributors\" article. \u003cCONTRIBUTOR_RESPONSE\u003e\n  \u003cRANGE_START\u003e1\u003c/RANGE_START\u003e\n  \u003cRANGE_END\u003e10\u003c/RANGE_END\u003e\n  ...",t:"Contributor Metadata Example"},"95":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Product Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a gnsdk_video_query_find_products() API call. The output was generated using the sample code in the \"Find Products\" article. \u003cVIDEO_PRODUCT\u003e\n  \u003cPACKAGE_LANG ID=\"1\" LANG=\"eng\"\u003eEnglish\u003c/PACKAGE_LANG\u003e\n  \u003cPRODUCTION_TYPE ...",t:"Product Metadata  Example"},"96":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Work Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a gnsdk_video_query_find_works() API call. The output was generated using the sample code in the \"Find Works\" article. \u003cVIDEO_WORK\u003e\n  \u003cTITLE_OFFICIAL LANG=\"eng\"\u003e\n    \u003cDISPLAY\u003eCowboys \u0026amp; Aliens\u003c/DISPLAY\u003e\n  ...",t:"Work Metadata  Example"},"97":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Seasons Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a gnsdk_video_query_find_seasons() API call. The output was generated using the sample code in the \"Find Seasons\" article. \u003cVIDEO_SEASON\u003e\n  \u003cTITLE_OFFICIAL LANG=\"eng\"\u003e\n    \u003cDISPLAY\u003eSeason 1\u003c/DISPLAY\u003e\n  ...",t:"Seasons Metadata  Example"},"98":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Series Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a gnsdk_video_query_find_series() API call. The output was generated using the sample code in the \"Find Series\" article. \u003cVIDEO_SERIES\u003e\n  \u003cTITLE_OFFICIAL LANG=\"eng\"\u003e\n    \u003cDISPLAY\u003eThe Simpsons\u003c/DISPLAY\u003e\n  ...",t:"Series Metadata Example"},"99":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/video/Suggestions Metadata Example.html",a:"The following is intended to give the reader some idea of the metadata returned in a gnsdk_video_query_find_suggestions() API call. The output was generated using the sample code in the \"Find Suggestions\" article. \u003cSUGGESTIONS_RESPONSE\u003e\n  \u003cRANGE_START\u003e1\u003c/RANGE_START\u003e\n  \u003cRANGE_END\u003e20\u003c/RANGE_END\u003e\n  ...",t:"Suggestions Metadata Example"},"100":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/link/Using Link.html",a:"Besides acquiring the necessary licensing, including Link requires the following define: #define GNSDK_LINK 1 And making the following initializing API call with your SDK Manager handle: gnsdk_link_initialize(sdkmgr_handle); Before your program exits, it needs to make the following API call to ...",t:"Using Link"},"101":{i:0.00876952930947845,u:"../Content/c-topics/accessing_metadata/link/Accessing Enriched Music Content.html",a:"To access enriched metadata content, you can purchase additional metadata entitlements and use the Link module APIs in your application. For more information, see Link Module Overview . You can use the Link module to retrieve enriched content, including: Cover art Artist images Genre art If there ...",t:"Accessing Enriched Music Content"},"102":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/link/Accessing Enriched Video Conten.html",a:"The general process to access enriched video metadata is: Use gnsdk_video_query_option_set() with the GNSDK_VIDEO_OPTION_ENABLE_LINK_ DATA option to set the query to enable access to Link metadata. Pass in a source GDO Gracenote Data Object: Containers most-commonly used to store information ...",t:"Accessing Enriched Video Content"},"103":{i:0.00540674440312433,u:"../Content/c-topics/accessing_metadata/link/Accessing Enriched Content Via URL.html",a:"There may be cases when you wish to retrieve metadata, descriptors, or external identifiers as quickly as possible, while lazy-loading enriched content such as cover art in the background. To achieve this, the GNSDK returns URL pointers to the enriched content, giving you greater control over when ...",t:"Improving Retrieval Performance by Using Enriched Content URLs"},"104":{i:0.00540674440312433,u:"../Content/c-topics/discovery/Generating a Playlist.html",a:"Generating a Playlist involves the following general steps. Create a new Playlist collection summary. Populate the collection summary with unique identifiers and GDOs. (Optional) Store the collection summary. (Optional) Load the stored collection summary into memory in preparation for Playlist ...",t:"Generating a Playlist"},"105":{i:0.010002539789924,u:"../Content/c-topics/advanced_topics/Playlist PDL Specification.html",a:"The GNSDK for Desktop Playlist Definition Language (PDL) is a query syntax, similar to Structured Query Language (SQL), that enables flexible custom playlist generation using human-readable text strings. PDL allows developers to dynamically create custom playlists. By storing individual PDL ...",t:"Playlist PDL Specification"},"106":{i:0.00540674440312433,u:"../Content/c-topics/discovery/Implementing MoodGrid.html",a:"The MoodGrid APIs: Encapsulate Gracenote’s Mood Editorial Content (mood layout and ids). Simplify access to MoodGrid results through x,y coordinates. Allow for multiple local and online data sources through MoodGrid Providers. Enable pre-filtering of results using genre, origin, and era attributes. ...",t:"Implementing MoodGrid"},"107":{i:0.00540674440312433,u:"../Content/c-topics/discovery/Implementing Rhythm.html",a:"The Rhythm API: Creates radio stations based on GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed by an application using Value keys.  GDOs can also contain ...",t:"Implementing Rhythm"},"108":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submitting New and Updated.html",a:"Submitting New and Updated Content Using the Submit module, an application can send new or updated Album content to Gracenote Services, including Album and Track metadata, and Track Feature data, such as audio fingerprints, and descriptors (genre, mood, tempo, and so on). Common use cases for Submit ...",t:"Submitting New and Updated Content to Gracenote"},"109":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submit Terminology.html",a:"Submit uses the following terms for its components and processes: Concept Description Editable GDO A GDO with editable metadata. Only specific fields are editable to preserve the GDO\u0027s metadata integrity with Gracenote. A GDO Gracenote Data Object: Containers most-commonly used to store information ...",t:"Submit Terminology"},"110":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submit Process.html",a:"The Submit process involves these basic steps: Create editable GDOs and/or features. Create parcels as containers for the updated content. Validate the GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, ...",t:"Submit Process"},"111":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submit APIs.html",a:"Submit APIs are grouped into four functional categories: General, Album and Track Metadata, Track Features, and Parcel A Submit container that wraps around editable GDO and feature metadata to enable the metadata transfer to Gracenote Service. Parcels can contain a single item—only editable GDOs, or ...",t:"Submit APIs"},"112":{i:0.00540674440312433,u:"../Content/c-topics/submit/Editable GDO Child and Value.html",a:"The following table lists child and value keys for the GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed by an application using Value keys.  GDOs can also ...",t:"Editable GDO Child and Value Keys"},"113":{i:0.00540674440312433,u:"../Content/c-topics/submit/Editable GDO Considerations.html",a:"When creating editable GDOs, consider these guidelines: The GNSDK_ GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed by an application using Value keys.  ...",t:"Editable GDO Considerations"},"114":{i:0.00540674440312433,u:"../Content/c-topics/submit/Enabling Test Mode for Submit.html",a:"You must test the application\u0027s submission logic to prevent the upload of invalid data to Gracenote Service. Set the GNSDK_SUBMIT_PARCEL_UPLOAD_FLAG_TEST_MODE flag to indicate the application is uploading test parcels. Once Gracenote validates the application\u0027s submission logic, clear the flag to ...",t:"Enabling Test Mode for Submit Finalization"},"115":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submitting Album Metadata.html",a:"You can submit Album metadata using two methods: Use the gnsdk_submit_edit_gdo_*() functions (Recommended). Directly edit XML created from an XML-rendered Full album GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values ...",t:"Submitting Album Metadata"},"116":{i:0.00540674440312433,u:"../Content/c-topics/submit/Example Editing and Submitting.html",a:"Example: Editing and Submitting an Existing Album GDO This simplified example demonstrates editing and submitting an existing album GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so ...",t:"Example Editing and Submitting an Existing Album GDO"},"117":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submitting Track Features.html",a:"You can submit Track Features only for Album GDOs generated from a TOC lookup. The following table shows the Submit functions used to create and process Track Features. Function Usage gnsdk_submit_parcel_data_init_features() Enables Gracenote Service to determine what specific feature information is ...",t:"Submitting Track Features"},"118":{i:0.00540674440312433,u:"../Content/c-topics/submit/Example Submitting Track Features.html",a:"Example: Submitting Track Features (1) The example illustrates processing and submitting feature data. Sample Application: submit_feature/main.c Steps for this code sample: Initialize features to determine which data is required by the Gracenote Service, and must be uploaded. Define each stream\u0027s ...",t:"Example Submitting Track Features 1"},"119":{i:0.00540674440312433,u:"../Content/c-topics/submit/Example Submitting Track Features1.html",a:"Example: Submitting Track Features (2)  Sample Code: submit_feature/main.c Steps for this sample application: Initialize Manager, User, MusicID, Submit, and DSP. Create MusicID album query. Get album GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. ...",t:"Example Submitting Track Features 2"},"120":{i:0.00540674440312433,u:"../Content/c-topics/submit/Submitting Parcels.html",a:"The Submit APIs for parcels support the following use cases: Add 1-n editable GDOs or 1-n Features, or both to a parcel. Add a unique identifier for a GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, ...",t:"Submitting Parcels"},"121":{i:0.00540674440312433,u:"../Content/c-topics/submit/Example Submitting an Album.html",a:"Example: Submitting an Album Parcel Sample Application: submit_album/main.c Steps for this application: Create an editable GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that ...",t:"Example Submitting an Album Parcel"},"122":{i:0.00540674440312433,u:"../Content/c-topics/submit/Availability of Edited Data Cache.html",a:"Edited Submit data resides in the application\u0027s lookup cache. You can implement a cache using the SQLite module, or alternately, implement your own application-specific cache.) Note that SQLite stores only the edited data, and not the entire parcel. Submit data edits exist in the lookup cache ...",t:"Availability of Edited Data Cache"},"123":{i:0.00540674440312433,u:"../Content/c-topics/submit/Synchronizing Dependent Fields.html",a:"Some metadata fields are dependent on other fields. Therefore editing a dependent field\u0027s metadata without also editing the fields on which it depends may cause a synchronization problem. To avoid this problem, the Submit functionality ensures that when a field\u0027s metadata is changed, all of its ...",t:"Synchronizing Dependent Fields"},"124":{i:0.00693867619872423,u:"../Content/c-topics/advanced_topics/Working with Non GDO Identifiers.html",a:"Working with Non-GDO Identifiers In addition to GDOs, Gracenote supports other media element identifiers, as shown in the following table. All of these represent TUI/Tag pairs. Identifier Description Best Use TUI TUI stands for \"Title Unique Id\", and  is the core identifier for Gracenote. This is a ...",t:"Working with Non GDO Identifiers"},"125":{i:0.00540674440312433,u:"../Content/c-topics/advanced_topics/Improving Matches Using Both.html",a:"To help improve the accuracy of the results returned from Gracenote Service, you can use both a TOC and a fingerprint in a query. The use of a fingerprint for additional identification criteria can increase the number of single- and multi-exact matches and decreasing the number of fuzzy match ...",t:"Improving Matches Using Both CD TOC and Fingerprints"},"126":{i:0.00540674440312433,u:"../Content/c-topics/advanced_topics/Load Balancing.html",a:"GNSDK for Desktop \u0027s load balancing capability enables it to automatically send its outgoing queries to a set of addresses. The purpose of this is to spread its queries across a set of host servers (hosts) so that no single host processes the entire load of a single SDK instance. When load balancing ...",t:"Load Balancing"},"127":{i:0.010002539789924,u:"../Content/c-topics/advanced_topics/Rendering a GDO as XML.html",a:"To present GDO Gracenote Data Object: Containers most-commonly used to store information returned by a query. GDOs can contain metadata values (names, titles, external IDs, and so on) that can be accessed by an application using Value keys.  GDOs can also contain references to other GDOs, which can ...",t:"Rendering a GDO as XML"},"128":{i:0.00540674440312433,u:"../Content/c-topics/advanced_topics/Using the Video TOC Generator APIs.html",a:"The Gracenote SDK provides APIs for reading TOC (Table of Contents) information from DVD and Blu Ray discs. From this information, the APIs can generate an XML TOC string that you can use to look up the DVD in the Gracenote Service. To use the TOC generator utility APIs, include the gnsdk_tocgen.h ...",t:"Using the Video TOC Generator APIs"},"129":{i:0.0108495126913098,u:"../Content/c-topics/advanced_topics/Using Lists.html",a:"GNSDK for Desktop uses list structures to store strings and other information that do not directly appear in results returned from the Gracenote Service. Lists generally contain information such as localized strings and region-specific information. Each list is contained in a corresponding List Type ...",t:"Using Lists"},"130":{i:0.00647163161607861,u:"../Content/shared-topics/gnsdk_best_practices/Best Practices for Image Dimensions.html",a:"Image Best Practices Gracenote images – in the form of cover art, artist images and more – are integral features in many online music services, as well as home, automotive and mobile entertainment devices. Gracenote maintains a comprehensive database of images in dimensions to accommodate all ...",t:"Best Practices for Image Dimensions"},"131":{i:0.00849607300745179,u:"../Content/shared-topics/gnsdk_best_practices/Collaborative Artists.html",a:"Best Practices The following topic provides best practices for handling collaborations in your application. Handling Collaborations when Processing a Collection When looking up a track using a text-based lookup, such as when initially processing a user’s collection, use the following best practices: ...",t:"Collaborative Artists"},"132":{i:0.00540674440312433,u:"../Content/shared-topics/gnsdk_best_practices/Best Practices for Audio Stream Recognition.html",a:"The following are recommended best practices for applications that recognize streaming audio. Gracenote periodically conducts analysis on its MusicID-Stream product to evaluate its usage and determine if there are ways we can make it even better. Part of this analysis is determining why some ...",t:"UI Best Practices for Audio Stream Recognition"},"133":{i:0.00540674440312433,u:"../Content/c-topics/c_doc_roadmaps/C-APIRefDocsOnline.html",a:"In addition to several popular object-oriented languages, you can develop GNSDK for Desktop applications using C. The following table shows where to find the C API Reference documentation: API Ref Name Documentation Link Description Location in Package C API Reference C API Reference API ...",t:"C API Reference Documentation"},"134":{i:0.00540674440312433,u:"../Content/c-topics/c_doc_roadmaps/C-DataModelOnline.html",a:"The GNSDK for Desktop C data model represents Gracenote media elements and metadata. The model establishes interrelationships among Gracenote Data Objects (GDOs) and the metadata they contain or reference. A table-based version of the data model is here: C Data Model . This table maps GDO Gracenote ...",t:"C Data Model"},"135":{i:0.00540674440312433,u:"../Content/shared-topics/front_back_matter/GlossaryList.html",a:"GNSDK Glossary ",t:"GNSDK Glossary"},});